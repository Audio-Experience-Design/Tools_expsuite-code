<?xml version="1.0"?>
<doc>
<assembly>
<name>
AMTatARI
</name>
</assembly>
<members>
<member name="T:ExpSuite.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:ExpSuite.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:ExpSuite.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:ExpSuite.My.Resources.Resources.connected">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:ExpSuite.My.Resources.Resources.disconnected">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:ExpSuite.My.Resources.Resources.Icon">
<summary>
  Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
</summary>
</member>
<member name="P:ExpSuite.My.Resources.Resources.network_idle">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:ExpSuite.My.Resources.Resources.network_offline">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:ExpSuite.My.Resources.Resources.network_transmit_receive">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="T:ExpSuite.clsDataDirectory">
 <summary>
   FrameWork - Data Directory support.
   Only one instance of clsDataDirectory is used in FrameWork: DataDirectory.
 </summary>
 <seealso cref="F:ExpSuite.FWintern.DataDirectory"/>
</member>
<member name="M:ExpSuite.clsDataDirectory.Reset">
 <summary>
   Reset all data directories. No data directories will be defined after Reset.
 </summary>
 <seealso cref="M:ExpSuite.clsDataDirectory.AddDir(System.String,System.String)"/>
</member>
<member name="P:ExpSuite.clsDataDirectory.Count">
 <summary>
   Get the number of data directories.
 </summary>
 <seealso cref="M:ExpSuite.clsDataDirectory.AddDir(System.String,System.String)"/>
 <seealso cref="M:ExpSuite.clsDataDirectory.Reset"/>
</member>
<member name="P:ExpSuite.clsDataDirectory.Title(System.Int32)">
 <summary>
   Get / Set the title of a data directory.
 </summary>
 <param name="Index">Directory index</param>
  <example>
 This example shows you how to GET the title of a data directory:
 szString = Title(Integer)
 //
 This example shows you how to SET the title of a data directory:
 Title(Index) = szString
 </example>
</member>
<member name="P:ExpSuite.clsDataDirectory.Path(System.Int32)">
 <summary>
   Get / Set the data directory to a path.
 </summary>
 <param name="Index">Directory index</param>
     
 <example>
 This example shows you how to GET the data directory:
 szString = Path(Integer)
 //
 This example shows you how to SET the data directory to a path:
 Path(Index) = szString
 </example>
</member>
<member name="M:ExpSuite.clsDataDirectory.AddDir(System.String,System.String)">
 <summary>
   Add a new data directory.
 </summary>
 <param name="Title">Title of the data directory</param>
 <param name="Path">[Optional] Default path of the data directory</param>
</member>
<member name="T:ExpSuite.clsFREQUENCY">
 <summary><c>clsFREQUENCY</c>
   Parameters of an Electrode or Acoustical channel.
   See Settings/Signal. The parameters of gfreqParL() and gfreqParR() as saved based on the clsFREQUENCY class.
 </summary>
</member>
<member name="P:ExpSuite.clsFREQUENCY.sAmp">
 <summary><c>sAmp()</c>
   Get / Set Amplitude
 </summary>
</member>
<member name="P:ExpSuite.clsFREQUENCY.lRange">
 <summary><c>lRange()</c>
   Get / Set Range
 </summary>
</member>
<member name="P:ExpSuite.clsFREQUENCY.lPhDur">
 <summary><c>lPhDur()</c>
   Get / Set Phase Duration [samples]
 </summary>
</member>
<member name="P:ExpSuite.clsFREQUENCY.sSPLOffset">
 <summary><c>sSPLOffset()</c>
   Get / Set SPL offset.
   Acoustical mode only: SPL Offset as additional attenuation of signal. Must be implemented by yourself.
 </summary>
</member>
<member name="P:ExpSuite.clsFREQUENCY.sCenterFreq">
 <summary><c>sCenterFreq()</c>
   Get / Set Center frequency.
   Acoustical mode only: Center Frequency of the channel [Hz]
 </summary>
</member>
<member name="P:ExpSuite.clsFREQUENCY.sBandwidth">
 <summary><c>sBandwidth()</c>
   Get / Set Bandwidth.
   Acoustical mode only: Bandwidth of the channel [Hz]
 </summary>
</member>
<member name="P:ExpSuite.clsFREQUENCY.sTHR">
 <summary><c>sTHR()</c>
   Get / Set Threshold.
   Electrical mode: the lowest allowed amplitude. Acoustical mode: the lowest recommended amplitude.
  </summary>
 <see cref="P:ExpSuite.clsFREQUENCY.sMCL">sMCL</see>
</member>
<member name="P:ExpSuite.clsFREQUENCY.sMCL">
 <summary><c>sMCL()</c>
   Get / Set Most Comfortable Level.
   Electrical mode: the highest allowed amplitude. Acoustical mode: the highest recommended amplitude.
 </summary>
 <see cref="P:ExpSuite.clsFREQUENCY.sTHR">sTHR</see>
</member>
<member name="M:ExpSuite.clsFREQUENCY.Copy">
 <summary><c>Copy()</c>
   Copies the properties of one object of clsFREQUENCY to another.
   Acoustical mode only: Bandwidth of the channel [Hz]
 </summary>
 <returns>A copy of input object</returns>
 <example>Set freqA = freqB.Copy</example>
</member>
<member name="T:ExpSuite.clsItemList">
 <summary>
 Flags to restrict the content of items.
 </summary>
 <remarks>Select the type of content (string, numeric, directory of file name) and then use a proper restriction.
  <list type="table">
  <item><description><c>ifString</c> Content is a string. See String flags for further restrictions.</description></item> 
  <item><description><c>ifNumeric</c> Content is numeric. See Numeric flags for further restrictions.</description></item> 
  <item><description><c>ifDirectory</c> Content is a directory.</description></item> 
  <item><description><c>ifFileName</c> Content is a file name. See Filename flags for further restrictions. Use the Unit parameter to set the file name mask (e.g. *.txt)</description></item> 
  <item><description><c>ifElectrodeL</c> Content is a left electrode from Settings/Signal. See Electrode flags for further restrictions.</description></item> 
  <item><description><c>ifElectrodeR</c> Content is a right electrode from Settings/Signal. See Electrode flags for further restrictions.</description></item> 
  <item><description><c>ifFlagTypeMask</c> Mask of the flag type. Use "MyFlags AND ifFlagTypeMask" to retrieve the type of the flag.</description></item> 
  </list>
 
 <b>Numeric Flags:</b>
 <list type="table">
 <item><description><c>ifInteger</c> Restrict to integer.</description></item> 
 <item><description><c>ifNonZero</c> Must not be zero.</description></item> 
 <item><description><c>ifMinTimeDelay</c>  Must be positive integer.</description></item> 
 <item><description><c>ifMin</c> Sets a restriction to a minimum value. Use the Min parameter to set the range.</description></item> 
 <item><description><c>ifMax</c> Sets a restriction to a maximum value. Use the Min parameter to set the range.</description></item> 
 <item><description><c>ifVectorized</c> Content can be a vector of numeric values, separated by blank or semicolon (not both!).</description></item> 
 </list>
 
 <b>Electrode Flags:</b>
 <list type="table">
 <item><description><c>ifMin</c> Content is numeric. See Numeric flags for further restrictions.</description></item> 
 <item><description><c>ifMax</c> Content is numeric. See Numeric flags for further restrictions.</description></item> 
 <item><description><c>ifVectorized</c> Content can be a vector of electrodes, separated by blank or semicolon (not both!).</description></item> 
 <item><description><c>ifNoTHRCheck</c> Do not check the AMP field to be higher then the THR field (from Settings/Signal)</description></item> 
 <item><description><c>ifNoMCLCheck</c> Do not check the AMP field to be lower then the MCL field (from Settings/Signal)</description></item> 
 </list>
 
 <b>String Flags:</b>
 <list type="table">
 <item><description><c>ifNonEmpty</c> Content must not be empty.</description></item> 
 <item><description><c>ifEnumeration</c> Content must be a chosen one from the list given in Unit string. Use the Unit parameter to set the list of atoms selected by ;</description></item> 
 <item><description><c>ifCaseSensitive</c> Content is case sensitive.</description></item> 
 <item><description><c>ifUpperCase</c> Content will be converted to upper case.</description></item> 
 <item><description><c>ifLowerCase</c> Content will be converted to lower case.</description></item> 
 </list>
 
 <b>File Name Flages:</b>
 <list type="table">
 <item><description><c>ifAbsolute</c> Absolute file name including path name.</description></item> 
 <item><description><c>ifRelativeDataDir1</c> File name, relative to the data directory #1 (index = 0)</description></item> 
 <item><description><c>ifRelativeDataDir2</c> File name, relative to the data directory #2 (index = 1)</description></item> 
 <item><description><c>ifRelativeDataDir3</c> File name, relative to the data directory #3 (index = 2)</description></item> 
 <item><description><c>ifRelativeDataDir4</c> File name, relative to the data directory #4 (index = 3)</description></item> 
 <item><description><c>ifRelativeDataDir5</c> File name, relative to the data directory #5 (index = 4)</description></item> 
 <item><description><c>ifRelativeDataDir6</c> File name, relative to the data directory #6 (index = 5)</description></item> 
 <item><description><c>ifRelativeDataDir7</c> File name, relative to the data directory #7 (index = 6)</description></item> 
 </list>
 
 <b>System Flags:</b>
 <list type="table">
 <item><description><c>ifIndex</c> Column is an index column. Used for renumbering of index functionality.</description></item> 
 <item><description><c>ifDisabled</c> Column will be disabled. Not implemented yet!</description></item> 
 </list>
 </remarks>
</member>
<member name="P:ExpSuite.clsItemList.ColCount">
 <summary>
 Get the number of columns in the item list. 
 </summary>
 <see cref="M:ExpSuite.clsItemList.Reset"/>
 <see cref="M:ExpSuite.clsItemList.AddCol(System.String,ExpSuite.clsItemList.ItemListFlags,System.String,System.Double,System.Double)"/>
 <value></value>
 <returns>Number of columns in the item list.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.clsItemList.RenumberIndex">
 <summary>
 Renumber index in item list.
 </summary>
 <remarks>Obsolete function: For backwards compatibility only</remarks>
</member>
<member name="P:ExpSuite.clsItemList.ColIndex(System.String)">
 <summary>
 Get the index of a column described by caption.
 This property is useful with experiment depending item lists, where the position of a column may move and the caption still remains.
 </summary>
 <param name="Col">Caption of a column</param>
 <value></value>
 <returns>Column index</returns>
 <remarks>ColIndex returns the index of a column, which was found for the given caption Col.</remarks>
</member>
<member name="P:ExpSuite.clsItemList.ColFlag(System.Int32)">
 <summary>
 Col[Flag, Min, Max, Unit, Caption] sets/gets the Flags, minimum value, maximum value, the unit or the caption of a column.
 </summary>
 <param name="lCol">Column index.</param>
 <value></value>
 <returns>Flag restricting the content.</returns>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.clsItemList.ColMin(System.Int32)">
 <summary>
 Col[Flag, Min, Max, Unit, Caption] sets/gets the Flags, minimum value, maximum value, the unit or the caption of a column.
 </summary>
 <param name="lCol">Column index.</param>
 <value></value>
 <returns>Minimum allowed value.</returns>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.clsItemList.ColMax(System.Int32)">
 <summary>
 Col[Flag, Min, Max, Unit, Caption] sets/gets the Flags, minimum value, maximum value, the unit or the caption of a column.
 </summary>
 <param name="lCol">Column index.</param>
 <value></value>
 <returns>Maximum allowed value.</returns>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.clsItemList.ColUnit(System.Int32)">
 <summary>
 Col[Flag, Min, Max, Unit, Caption] sets/gets the Flags, minimum value, maximum value, the unit or the caption of a column.
 </summary>
 <param name="lCol">Column index.</param>
 <value></value>
 <returns>Unit or string with enumerated atoms separated by ";" if flag is ifEnumeration.</returns>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.clsItemList.ColCaption(System.Int32)">
 <summary>
 Col[Flag, Min, Max, Unit, Caption] sets/gets the Flags, minimum value, maximum value, the unit or the caption of a column.
 </summary>
 <param name="lCol">Column index.</param>
 <value></value>
 <returns>Caption of the column.</returns>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.clsItemList.GetIndexCol">
 <summary>
 Get the index of the column defined as the Index-column.
 </summary>
 <value></value>
 <returns>Column index.</returns>
 <remarks>This column will be stamped with .ItemStamp</remarks>
 <see cref="M:ExpSuite.clsItemList.ItemStamp(System.String)"/>
</member>
<member name="P:ExpSuite.clsItemList.SelectedColumnLast">
 <summary>
 Get the index of the last column, within all selected cells.
 </summary>
 <value></value>
 <returns>Column index.</returns>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.clsItemList.SelectedColumnFirst">
 <summary>
 Get the index of the first column, within all selected cells.
 </summary>
 <value></value>
 <returns>Column index.</returns>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.clsItemList.SelectedItemFirst">
 <summary>
 Get the index of the first item (lowest index), within all selected cells.
 </summary>
 <value></value>
 <returns>Column index.</returns>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.clsItemList.ItemIndex">
 <summary>
 Set the index of selected item.
 </summary>
 <value></value>
 <returns>Item index</returns>
 <remarks>ItemIndex starts with 0 and its maximum value is ItemCount-1. ItemIndex returns -1 if no item has been selected.</remarks>
</member>
<member name="P:ExpSuite.clsItemList.ItemCount">
 <summary>
 Get the number of items in the item list.
 </summary>
 <value></value>
 <returns>Number of items in the item list. Returns 0 for disabled item list.</returns>
 <remarks>ItemCount returns the number of items in the item list. Add at least one column before setting item count, otherwise one extra column will be created!</remarks>
</member>
<member name="P:ExpSuite.clsItemList.Item(System.Int32,System.Int32)">
 <summary>
 Get/Set the content of item at given column. 
 </summary>
 <param name="lItem">Index of the item, beginning with 0.</param>
 <param name="lCol">Column selector. Integer for selection by index.</param>
 <value></value>
 <returns>Content of the item. Double variant if the column is a numeric scalar or electrode scalar. String variant otherwise.</returns>
 <remarks>Item returns the content of an item at given column. The column can be selected by its index. The content won't be checked for validity - use CheckItem before setting items with unknown content. If the item column is set to be numeric scalar or electrode scalar, the variant returned by Item is of data type double. Otherwise Item returns a string variant.</remarks>
</member>
<member name="P:ExpSuite.clsItemList.Item(System.Int32,System.String)">
 <summary>
 Get/Set the content of item at given column. 
 </summary>
 <param name="lItem">Index of the item, beginning with 0.</param>
 <param name="Col">Column selector. String for selection by name.</param>
 <value></value>
 <returns>Content of the item. Double variant if the column is a numeric scalar or electrode scalar. String variant otherwise.</returns>
 <remarks>Item returns the content of an item at given column. The column can be selected by its caption. The content won't be checked for validity - use CheckItem before setting items with unknown content. If the item column is set to be numeric scalar or electrode scalar, the variant returned by Item is of data type double. Otherwise Item returns a string variant.</remarks>
</member>
<member name="P:ExpSuite.clsItemList.AppendToItem(System.Int32,System.String,System.Boolean,System.String)">
 <summary>
 Add content to cell at given row and column. By default the new value will be appended to the existing item. Set 'AddBeforeCellContent' true to append existing cell content to new value.
 </summary>
 <param name="lItem">Index of the item, beginning with 0.</param>
 <param name="Col">Column selector. String for selection by name.</param>
 <param name="AddBeforeCellContent">Append existing content to new content (default: false).</param>
 <remarks>The column can be selected by its caption. The content won't be checked for validity.</remarks>
</member>
<member name="P:ExpSuite.clsItemList.AppendToItem(System.Int32,System.Int32,System.Boolean)">
 <summary>
 Add content to cell at given row and column. By default the new value will be appended to the existing item. Set 'AddBeforeCellContent' true to append existing cell content to new value.
 </summary>
 <param name="lItem">Index of the item, beginning with 0.</param>
 <param name="lCol">Column selector. Integer for selection by index.</param>
 <param name="AddBeforeCellContent">Append existing content to new content (default: false).</param>
 <remarks>The column can be selected by its caption. The content won't be checked for validity.</remarks>
</member>
<member name="P:ExpSuite.clsItemList.TextMatrix(System.Int32,System.Int32)">
 <summary>
 TextMatrix sets/gets the content of the item list table.
 </summary>
 <param name="lRow"></param>
 <param name="lCol"></param>
 <value></value>
 <returns></returns>
 <remarks><b>Don't use it.</b>
 TextMatrix is very similar to Item, the only difference is the row index: it refers to the row in the item list table including the first row with captions.
 It was implemented to provide a kind of compatibility to the TextMatrix method of the FFF object, which is used for the implementation of the item list.
 The column can be refered by its index only (no indexing by caption here).
</remarks>
</member>
<member name="M:ExpSuite.clsItemList.AddCol(System.String,ExpSuite.clsItemList.ItemListFlags,System.String,System.Double,System.Double)">
 <summary>
 Add a column to the item list.
 </summary>
 <param name="szCaption">Caption. String with the caption (case doesn't matter) or Long with the index of the column.</param>
 <param name="Flag">Flag restricting the content of all items in this column.</param>
 <param name="szUnit">Unit or string with enumerated atoms separated by ";" if Flag is ifEnumeration.</param>
 <param name="dMin">Minimum allowed value if Flag is ifMin.</param>
 <param name="dMax">Maximum allowed value if Flag is ifMax.</param>
 <remarks>A new column will be added to the end (most right) of the item list. The columns will be identyfied by its Caption or the index. Flag can be set to restrict the content of the column.
 See <see cref="T:ExpSuite.clsItemList.ItemListFlags"/> for possible values. Set to ifString if not used (=column entries are string without any restrictions)
 Unit, Min or Max parameters may be set, which are associated with given Flag.
 The index column is column 0 by default, this can be changed assigning flag ifIndex to a column.
 </remarks>
</member>
<member name="M:ExpSuite.clsItemList.ItemStamp(System.String)">
 <summary>
 Stamp the current item as "processed without errors". 
 </summary>
 <param name="szStamp">Stamp for the first column with this string. If omited, szStamp=" *"</param>
 <remarks>This function is for backwards compatibility only. It has been used to show which item is currently being processed.
 Now use <see cref="P:ExpSuite.clsItemList.ItemStatus(System.Int32,System.String)"/>
 to set the status of the item like fresh, processing or processed.
 The item list will be scrolled to ensure the stamped item to be visible for the user.
 Current implementation inserts the szStamp after the content of the first column.</remarks>
</member>
<member name="M:ExpSuite.clsItemList.NextItem(System.Single)">
 <summary>
 Notify Framework about processing of next item in experiment.
 </summary>
 <param name="sProgress">Optional value of the progress bar in percent [0...100]. The progress bars (in experiment and main screens) will be set only if the progress bar is not synced to the break.</param>
 <returns>TRUE if the last item of the experiment hase been processed. FALSE if there are any items left.</returns>
 <remarks>NextItem increases the item index and provides all functionality which depends on increasing item as breaks, beeps, logging. Call NextItem to set the next item to stimulate.
 NextItem returns TRUE if the end of experiment was reached and FALSE otherwise.
 NextItem will process following tasks:
 <li>Handle beeps</li>
 <li>Update labels</li>
 <li>Induce a break, if necessary. In this case NextItem will terminate after the break is done (or Cancel ocurs).</li>
 </remarks>
</member>
<member name="M:ExpSuite.clsItemList.NextItem(System.Int32,System.Single)">
 <summary>
 Notify Framework about processing of next item in experiment.
 </summary>
 <param name="lNrInterleaved">Number of interleaved items in experiment.</param>
 <param name="sProgress">Optional value of the progress bar in percent [0...100]. The progress bars (in experiment and main screens) will be set only if the progress bar is not synced to the break.</param>
 <returns>TRUE if the last item of the experiment hase been processed. FALSE if there are any items left.</returns>
 <remarks>NextItem returns the next item index within the interleaved range and provides all functionality which depends on increasing item as breaks, beeps, logging.
 NextItem returns TRUE if the end of experiment was reached and FALSE otherwise.
 NextItem will process following tasks:
 <li>Handle beeps</li>
 <li>Update labels</li>
 <li>Induce a break, if necessary. In this case NextItem will terminate after the break is done (or Cancel ocurs).</li>
 </remarks>
</member>
<member name="M:ExpSuite.clsItemList.Load(System.String,System.Windows.Forms.ProgressBar)">
 <summary>
 Load an item list from a CSV file.
 </summary>
 <param name="szFile">File name of the Item list.</param>
 <param name="pbStatus">Progress bar status.</param>
 <returns>Error message. Empty if no errors.</returns>
 <remarks>The number of columns and the captions will be compared between the loaded and defined item list and warnings will be displayed in case of mismatch.</remarks>
</member>
<member name="M:ExpSuite.clsItemList.Save(System.String,System.Windows.Forms.ProgressBar)">
 <summary>
 Save an item list to a CSV file.
 </summary>
 <param name="szFile">File name of the Item list.</param>
 <param name="pbStatus">Progress bar status.</param>
 <returns>Error message. Empty if no errors.</returns>
 <remarks>Error message will be displayed in case of write errors.</remarks>
</member>
<member name="M:ExpSuite.clsItemList.Append(System.String,System.Windows.Forms.ProgressBar)">
 <summary>
 Append a CSV file to the existing item list.
 </summary>
 <param name="szFile">File name.</param>
 <param name="pbStatus">Progress bar status</param>
 <returns>Error message. Empty if no errors.</returns>
 <remarks>The number of columns and the captions will be compared between the loaded and defined item list and warnings will be displayed in case of mismatch.</remarks>
</member>
<member name="M:ExpSuite.clsItemList.ShuffleItems(System.Int32,System.Int32)">
 <summary>
 Shuffle items.
 </summary>
 <param name="lBeg">Shuffle from item index... (range).</param>
 <param name="lEnd">Shuffle to item index... (end of range).</param>
 <returns></returns>
 <remarks>Shuffle all items from lBeg to lEnd.</remarks>
</member>
<member name="M:ExpSuite.clsItemList.ShuffleItems(System.Int32[])">
 <summary>
 Shuffle items.
 </summary>
 <param name="lIdx">Array with indicies of items to shuffle.</param>
 <remarks>Items with the indecies given in the array lIdx.</remarks>
</member>
<member name="M:ExpSuite.clsItemList.Clear">
 <summary>
 Clears a defined item list.
 </summary>
 <remarks>All items in the item list will be removed, all columns set to their default.
 The definitions of columns remain unchanged. Reset must have been called before executing Clear.</remarks>
</member>
<member name="P:ExpSuite.clsItemList.SelectedItems">
 <summary>
 Selected items.
 </summary>
 <returns>Number of selected items.</returns>
</member>
<member name="M:ExpSuite.clsItemList.Reset">
 <summary>
 Reset item list to a new, not defined one.
 </summary>
 <remarks>The item list will be initialized to an undefined one. All column definitions, all items will be removed. No item list will available after Reset, thus call AddCol immediatly after Reset.</remarks>
</member>
<member name="M:ExpSuite.clsItemList.Sort(System.Windows.Forms.DataGridViewColumn,System.ComponentModel.ListSortDirection)">
 <summary>
 Sort Itemlist.
 </summary>
 <param name="Col">Column to sort.</param>
 <param name="Mode">Sort direction: ascending or descending.</param>
</member>
<member name="M:ExpSuite.clsItemList.SetOptimalColWidth">
 <summary>
 Sets the optimal column width for displaying the item list.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.clsItemList.CheckItem(System.Int32,System.String@)">
 <summary>
 Check the content of an item for a valid value according to defined flags of the column.
 </summary>
 <param name="Col">Column selector. String for selection by caption or Long for selection by index.</param>
 <param name="szX">Value which will be checked against the restrictions. If the value should be a numeric one, it will be converted to double and back to string.</param>
 <returns>Error message. Empty if szX suits the restrictions.</returns>
 <remarks>By using CheckItem, the content of an item can be checked before writing to the item list.
 CheckItem checks szX according to rules set by flags for given column Col and results in a string containing an error message. If the content szX is correct, CheckItem results in an empty string.</remarks>
</member>
<member name="M:ExpSuite.clsItemList.CheckItem(System.String,System.String)">
 <summary>
 Check if value (szX) is a valid data type for column Col.
 </summary>
 <param name="Col">Column name as string.</param>
 <param name="szX">Value to check.</param>
 <returns>Error message if data is not valid.</returns>
</member>
<member name="P:ExpSuite.clsItemList.ItemStatus(System.Int32,System.String)">
 <summary>
  Get/Set the item status.
 </summary>
 <param name="lRow">Index of the item.</param>
 <param name="szStamp"></param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.clsItemList.#ctor(System.Windows.Forms.DataGridView)">
 <summary>
 New instance of DataGridView.
 </summary>
 <param name="dgvList">DataGridView.</param>
 <remarks>Used in Framework to create item list and create result list.</remarks>
</member>
<member name="P:ExpSuite.clsItemList.Directory">
 <summary>
 Set/get directory where result list is stored. This value will overwrite default folder (eg. Settings file location).
 </summary>
 <returns>Set/get directory.</returns>
 <remarks>If value is empty the directory of last Save/Load dialogue is the initial directory.</remarks>
 <example>frmX.ResultList.Directory=DataDirectory.Path(0)</example>
</member>
<member name="F:ExpSuite.Config.ItemListExtension">
 <summary>
 Define item list extension (before ExpSuite FW v1.0 default was: "itl.csv").
 </summary>
 <remarks>The leading dot '.' is not necessary.</remarks>
</member>
<member name="P:ExpSuite.clsSTIMULUS.lElectrode">
 <summary>
 Electrode or acoustical channel.
 </summary>
 <value>Electrode/channel index.</value>
 <returns>Electrode/channel index.</returns>
 <remarks>Get/set index.</remarks>
</member>
<member name="P:ExpSuite.clsSTIMULUS.sAmp">
 <summary>
 Amplitude.
 </summary>
 <value>Amplitude value.</value>
 <returns>Amplitude value.</returns>
 <remarks>RIB: 0..127 [digits], YAMI:-100..0 [dB].</remarks>
</member>
<member name="P:ExpSuite.clsSTIMULUS.lRange">
 <summary>
 Amplitude Range.
 </summary>
 <value>Range value.</value>
 <returns>Range value.</returns>
 <remarks>In electrical mode only.</remarks>
</member>
<member name="P:ExpSuite.clsSTIMULUS.lPhDur">
 <summary>
 Phase Duration [samples].
 </summary>
 <value>Phase duration.</value>
 <returns>Phase duration.</returns>
 <remarks>Electrical mode: A pulse includes one positive and negative phase, duration is: 2*lPhDur+1
 Acoustical mode: A pulse is lPhDur long (positive phase only).</remarks>
</member>
<member name="P:ExpSuite.clsSTIMULUS.lPulsePeriod">
 <summary>
 Pulse Period [samples].
 </summary>
 <value>Pulse Period.</value>
 <returns>Pulse Period.</returns>
 <remarks>Interpulse interval (IPI), interclick interval (ICI), 1/Pulse rate.</remarks>
</member>
<member name="P:ExpSuite.clsSTIMULUS.lModifier">
 <summary>
 Modifier in electrical mode.
 </summary>
 <value>Modifier value.</value>
 <returns>Modifier value.</returns>
</member>
<member name="M:ExpSuite.clsSTIMULUS.Copy">
 <summary>
 Copy stimulus class.
 </summary>
</member>
<member name="T:ExpSuite.CSVParser">
 <summary>
 FrameWork - CSV files support.
 </summary>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.CSVParser.Quota">
 <summary>
 Set content quota character.
 Content will be quoted wiht this character if it contains a separator charachter.
 </summary>
 <value></value>
 <returns>Quota character</returns>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.CSVParser.Separator">
 <summary>
 Get the separator between the values.
 </summary>
 <value></value>
 <returns>Separator character</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.CSVParser.UnquoteCell(System.String)">
 <summary>
 Unquote a single cell - remove quotas
 </summary>
 <param name="szCell">Content of a single cell.</param>
 <returns>Unquoted value.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.CSVParser.ParseString(System.String,System.String[0:,0:]@,System.Windows.Forms.ProgressBar)">
 <summary>
 Parse content of a string to a 2D-string array.
 </summary>
 <param name="szSource">Row in CSV format.</param>
 <param name="szArr">Array with values retrieved from szSource.</param>
 <param name="pbStatus">Progressbar to show the progress of parsing. Optional.</param>
 <returns>Error message, empty if no error ocured.</returns>
 <remarks>A string of a CSV file will be parsed and all found values well be copied to szArr().<br>
 Rules (if " is Quota and , is Separator):    </br>
 <li> " : mszQuota </li>
<li> , : Separator </li>
<li> row : cell,cell,cell </li>
<li> not quoted cells: </li>
<li>   ab,cd -> two cells: ab and cd </li>
<li>   ab"cd -> ab"cd </li>
<li>   ab""cd -> ab""cd </li>
<li>   ab" -> ab" </li>
<li>   ab"" -> ab"" </li>
<li> quoted cells: </li>
<li>   "ab" -> ab </li>
<li>   "ab,cd" -> ab,cd </li>
<li>   "ab"cd -> ab and ignore cd </li>
<li>   "ab"de" -> ab and ignore cd </li>
<li>   ""abcd -> empty cell and ignore abcd </li>
<li>   "ab""cd" -> ab"cd </li>
<li>   "ab"",cd" -> ab"cd </li>
<li>   """abcd" -> "abcd </li>
<li> last quoted cell in a row: </li>
<li>   "abEOL -> ab </li>
<li>   "ab"EOL -> ab </li>
<li>   "ab""EOL -> ab" </li>
<li>   "ab"""EOL -> ab" </li>
<li>   "ab""cdEOL -> ab"cd </li>
<li> Empty row -> one empty cell </li>
 </remarks>
</member>
<member name="M:ExpSuite.CSVParser.ReadArr(System.String,System.String[0:,0:]@,System.Windows.Forms.ProgressBar)">
 <summary>
 Read content of a CSV file to a 2D-string array.
 </summary>
 <param name="szFile">File name of the CSV file.</param>
 <param name="szArr">Array with the content. szArr() will be resized to the correct size.</param>
 <param name="pbStatus">Progress bar to show the progrees of parsing.</param>
 <returns>Error message:
<li>Empty: no error ocured. </li>
<li>File not found: szFile is empty or the file specified by szFile couldn't be found. </li>
<li>File is empty: File could be opened but is empty </li>
<li>System Error + Error description: A system error occured. See VB Help for the explanation of the error message. </li></returns>
 <remarks>ReadArr loads file with the file name szFile, parses the content and copies the data to szArr().<br>
 Rules (if " is Quota and , is Separator):</br>    
<li> " : mszQuota </li>
<li> , : Separator </li>
<li> row : cell,cell,cell </li>
<li> not quoted cells: </li>
<li>   ab,cd -> two cells: ab and cd </li>
<li>   ab"cd -> ab"cd </li>
<li>   ab""cd -> ab""cd </li>
<li>   ab" -> ab" </li>
<li>   ab"" -> ab"" </li>
<li> quoted cells: </li>
<li>   "ab" -> ab </li>
<li>   "ab,cd" -> ab,cd </li>
<li>   "ab"cd -> ab and ignore cd </li>
<li>   "ab"de" -> ab and ignore cd </li>
<li>   ""abcd -> empty cell and ignore abcd </li>
<li>   "ab""cd" -> ab"cd </li>
<li>   "ab"",cd" -> ab"cd </li>
<li>   """abcd" -> "abcd </li>
<li> last quoted cell in a row: </li>
<li>   "abEOL -> ab </li>
<li>   "ab"EOL -> ab </li>
<li>   "ab""EOL -> ab" </li>
<li>   "ab"""EOL -> ab" </li>
<li>   "ab""cdEOL -> ab"cd </li>
<li> Empty row -> one empty cell </li>
 </remarks>
</member>
<member name="M:ExpSuite.CSVParser.ReadDGV(System.String,System.Windows.Forms.DataGridView@,System.Windows.Forms.ProgressBar)">
 <summary>
 Read content of a CSV file to a DataGridView object.
 </summary>
 <param name="szFile">File name of the CSV file.</param>
 <param name="dgvDest">Datagridview object as destination for the data.</param>
 <param name="pbStatus">Progress bar to show the progress of parsing.</param>
 <returns>Error message, empty if no error ocured.</returns>
 <remarks>Rules (if " is Quota and , is Separator):
<li> " : mszQuota </li>
<li> , : Separator </li>
<li> row : cell,cell,cell </li>
<li> not quoted cells: </li>
<li>   ab,cd -> two cells: ab and cd </li>
<li>   ab"cd -> ab"cd </li>
<li>   ab""cd -> ab""cd </li>
<li>   ab" -> ab" </li>
<li>   ab"" -> ab"" </li>
<li> quoted cells: </li>
<li>   "ab" -> ab </li>
<li>   "ab,cd" -> ab,cd </li>
<li>   "ab"cd -> ab and ignore cd </li>
<li>   "ab"de" -> ab and ignore cd </li>
<li>   ""abcd -> empty cell and ignore abcd </li>
<li>   "ab""cd" -> ab"cd </li>
<li>   "ab"",cd" -> ab"cd </li>
<li>   """abcd" -> "abcd </li>
<li> last quoted cell in a row: </li>
<li>   "abEOL -> ab </li>
<li>   "ab"EOL -> ab </li>
<li>   "ab""EOL -> ab" </li>
<li>   "ab"""EOL -> ab" </li>
<li>   "ab""cdEOL -> ab"cd </li>
<li> Empty row -> one empty cell </li></remarks>
</member>
<member name="M:ExpSuite.CSVParser.WriteArr(System.String,System.String[0:,0:],System.Windows.Forms.ProgressBar)">
 <summary>
 Write content of a 2D-string array to a CSV file.
 </summary>
 <param name="szFile">File Name of the new CSV file.</param>
 <param name="szArr">Array with the data.</param>
 <param name="pbStatus">Progress bar to show the progress of parsing.</param>
 <returns>Error message, empty if no error ocured.</returns>
 <remarks>Rules (if " is Quota and , is Separator):
<li> row : cell,cell,cell </li>
<li> cell: </li>
<li>   abcdef -> abcdef </li>
<li>   abc,def -> "abc,def" </li>
<li>   "abcdef -> """abcdef" </li>
<li>   abc",def -> "abc"",def" </li>
<li>   ab,cd,"ef -> "ab,cd""ef" </li></remarks>
</member>
<member name="M:ExpSuite.CSVParser.WriteDGV(System.String,System.Windows.Forms.DataGridView,System.Windows.Forms.ProgressBar)">
 <summary>
 Write content of a DataGridView to a CSV file.
 </summary>
 <param name="szFile">File Name of the new CSV file.</param>
 <param name="dgvSource">DataGridView object containing data.</param>
 <param name="pbStatus">Progress bar to show the progress of parsing.</param>
 <returns>Error message, empty if no error ocured.</returns>
 <remarks>Rules (if " is Quota and , is Separator):
<li> row : cell,cell,cell </li>
<li> cell: </li>
<li>   abcdef -> abcdef </li>
<li>   abc,def -> "abc,def" </li>
<li>   "abcdef -> """abcdef" </li>
<li>   abc",def -> "abc"",def" </li>
<li>   ab,cd,"ef -> "ab,cd""ef" </li> </remarks>
</member>
<member name="M:ExpSuite.CSVParser.QuoteCell(System.String)">
 <summary>
 Quote a single cell according to the CSV rules.
 </summary>
 <param name="szCell">Content of a single cell.</param>
 <returns>Quoted value.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.CSVParser.#ctor">
 <summary>
 New instance of CSVParser
 </summary>
</member>
<member name="T:ExpSuite.frmAbout">
 <summary>
 FrameWork Module. Implementation of the About form.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.frmExp">
 <summary>
 FrameWork Module. Implementation of the Experiment Screen and Subject Interaction.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.frmExp.EXPFLAGS">
 <summary>
 Defined flags for experimental screen.
 </summary>
</member>
<member name="T:ExpSuite.frmExp.TRIGGER">
 <summary>
 Defined flags for trigger device (Unity tracker).
 </summary>
</member>
<member name="P:ExpSuite.frmExp.InExperiment">
 <summary>
 Set the application mode to "in experiment"
 </summary>
 <value></value>
 <returns>True if in experiment.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.SetHUIDevice(System.Int32)">
 <summary>
 Set HUI device (index).
 </summary>
 <param name="lIdx">Device Index.</param>
 <returns>Error message if an error occures.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.SetOnResponseCallback(ExpSuite.FWintern.OnResponseDelegate)">
 <summary>
 Sets the callback on subject's response.
 </summary>
 <param name="lAddr"></param>
 <remarks>OnResponse callback will be executed on:
 <li>Subject pressed a HUI button</li>
 <li>Subject pressed a keyboard key</li> 
 <li>Subject pressed a trigger button (Unity tracker)</li> </remarks>
</member>
<member name="M:ExpSuite.frmExp.SetResponseNames(System.String[],System.String,System.String,System.String)">
 <summary>
 Sets the caption of response buttons.
 </summary>
 <param name="szArgs">Required. String. The caption of response button will be set for each string in the array.</param>
 <param name="szStart">Required. String. Text for the Start button.</param>
 <param name="szNext">Required. String. Text for the Next button.</param>
 <param name="szCancel">equired. String. Text for the Cancel button.</param>
 <returns></returns>
 <remarks>The number of items in szArgs() must less or equal to AFC.</remarks>
</member>
<member name="M:ExpSuite.frmExp.GetResponseButtons(System.Int32[]@,System.Int32@,System.Int32@)">
 <summary>
 Array with response buttons.
 </summary>
 <param name="lButtons">Array of buttons.</param>
 <param name="lStart">Start button.</param>
 <param name="lNext">Next button.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.GetResponseKeys(System.Int32[]@,System.Int32@,System.Int32@)">
 <summary>
 Array with response keys.
 </summary>
 <param name="lKeys">Array of keys.</param>
 <param name="lStart">Start key.</param>
 <param name="lNext">Next key.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.GetResponseTriggers(System.Int32[]@,System.Int32@,System.Int32@)">
 <summary>
 Array with response triggers (tracker).
 </summary>
 <param name="lTriggers">Array of triggers.</param>
 <param name="lStart">Start trigger.</param>
 <param name="lNext">Next trigger.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.SetResponseButtons(System.Int32[],System.Int32,System.Int32)">
 <summary>
 Sets the HUI codes for the response, start and next buttons.
 </summary>
 <param name="lButtons">Array with the HUI codes for the responses. The array size must match the number of alternatives given by AFC. The codes can be retrieved from Settings/Experiment Screen/Get Response.</param>
 <param name="lStart">HUI code for the start button.</param>
 <param name="lNext">HUI code for the next-item button.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.SetResponseKeys(System.Int32[],System.Int32,System.Int32)">
 <summary>
 Set the codes for the response, start and next keys.
 </summary>
 <param name="lKeys">Array with the ASCII codes for the responses. The array size must match the number of alternatives given by AFC on Init.</param>
 <param name="lStart">ASCII code for the start key.</param>
 <param name="lNext">ASCII code for the next-item key.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.SetResponseTriggers(System.Int32[],System.Int32,System.Int32)">
 <summary>
 Sets the trigger codes for the response, start and next buttons (tracker).
 </summary>
 <param name="lTriggers">Array with the tracker trigger codes for the responses. The array size must match the number of alternatives given by AFC. The codes can be retrieved from Settings/Experiment Screen/Get Response.</param>
 <param name="lStart">Tracker trigger code for the start.</param>
 <param name="lNext">Tracker trigger code for the next-item.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.SetVisuCaption(System.String[])">
 <summary>
 Sets the caption of interval visualisation boxes (lblVisu)
 </summary>
 <param name="szCaption">Captions of the interval visualisation boxes. The array size must match the number of intervals given by IFC on Init.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.SetRequestText(System.String,System.Drawing.Color)">
 <summary>
 Sets the request text in the experiment. This may be the question to the subject or something else...
 </summary>
 <param name="szText">Request to the subject.</param>
 <param name="lForeColor">Color of the text, if Nothing or Color.Empty the standard windows color is used.</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.SetBreakText(System.String)">
 <summary>
 Sets the break text in the experiment. 
 </summary>
 <param name="szText">Text which is flashing during the break.</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.SetEndOfExperimentText(System.String)">
 <summary>
 Sets the end-of-experimt text. 
 </summary>
 <param name="szText">Text appears at the enf of experiment.</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.SetStartOfExperimentText(System.String)">
 <summary>
 Sets the start-of-experiment text. 
 </summary>
 <param name="szText">Text which appears at the start of experiment</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.SetProgress(System.Double,System.String@)">
 <summary>
 Set the value of progress bar.
 </summary>
 <param name="sVal">Represents progress in percent, must be a value in [0;100]. </param>
 <param name="szX">Optional string which will be used instead of the sVal.</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.Init(System.Int32,System.Int32,System.Int32,ExpSuite.frmExp.EXPFLAGS)">
 <summary>
 Initialize EXP module.
 </summary>
 <param name="lExpMode">ExpMode sets the mode of active experiment.</param>
 <param name="lAFC">Alternative Forced Choice, sets the number of visible buttons in experiment.</param>
 <param name="lIFC">Interval Forced Choice, sets the number of stimuli parts in the stimulus sequence.</param>
 <param name="Flags">Flags: Bit 0: start button visible; Bit 1: response buttons visible; Bit 2: next button visible.</param>
 <returns>Return_value_or_object</returns>
 <remarks>
 Defined experiment modes:
<li> 0: pure AFC/IFC experiment. Visual items are arranged vertically. Response buttons are arranged horizontally below the items.</li>
<li> 1: numeric open range combined with AFC/IFC experiment. The first button is disabled until a valid numerical value is entered in the TextBox txtNum.</li>
<li> 2: 2AFC/2IFC, used for binaural loudness balancing. Static screen arrangment. Set AFC and IFC to 0 in this mode.</li>
<li> 3: pure AFC/IFC experiment. Visual items are arranged horizontally. Response buttons are arranged horizontally below the items.</li>
<li> 4: pure AFC/IFC experiment. Visual items and response buttons are arranged vertically. Text is on top.</li>
<li> 5: AFC/IFC experiment with a slider. Visual items and response buttons are arranged vertically. The mouse wheel can be used to adjust eg. levels.</li>
<li> 6: Priming experiment with 2 buttons.</li>
<li> 7: rating of wave files, eg. used for InPaint.</li>
 It's allowed to execute Init() repetitive.</remarks>
</member>
<member name="M:ExpSuite.frmExp.UnloadMe">
 <summary>
 Unload Experimental screen
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.DisableResponse">
 <summary>
 Disable response controls.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.EnableResponse(System.Boolean)">
 <summary>
 Enable response controls.
 </summary>
 <param name="blnAutoDisable">If blnAutoDisable is TRUE the experimental screen will automatically turn to disabled mode after a valid response.</param>
 <remarks>In ExpMode = 1 the first button remains disable until a valid numerical value is entered.</remarks>
</member>
<member name="M:ExpSuite.frmExp.WaitForNext">
 <summary>
 Wait for next item.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.GetResponse(System.Int32@,System.DateTime@)">
 <summary>
 Get the response code.
 </summary>
 <param name="lResponse">Response code</param>
 <returns>True if any response was given, False otherwise.</returns>
 <remarks>Following codes are available:
<li> 0: First response button (usually Left or OK) </li>
<li> 1: Second response button (usually Right) </li>
<li> ... </li>
<li> ... </li>
<li> N: N-th response button (maximum number defined by AFC on Init) </li>
<li> ... </li>
<li> ... </li>
<li> 15: Last possible response button </li>
<li> 256: Button "Start" </li>
<li> 257: Button "Next" </li>
<li> 258: Button "Cancel" </li> </remarks>
</member>
<member name="M:ExpSuite.frmExp.SetResponse(System.Int32)">
 <summary>
 Set the response to a given code.
 </summary>
 <param name="lX">Code</param>
 <remarks>See <see cref="M:ExpSuite.frmExp.SetResponse(System.Int32)"/> to see the available codes.</remarks>
</member>
<member name="M:ExpSuite.frmExp.GetValue">
 <summary>
 Get the response value from the subject.
 </summary>
 <returns>Value. This is defined for ExpMode 1 only and it will be a numeric value.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.ShowBlankScreen(System.Boolean)">
 <summary>
 Show blank experimental screen.
 </summary>
 <param name="blnTop">If blnTop is true the experimental screen always will remain on top of the screen.</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.ShowStartScreen">
 <summary>
 Show the experimental start screen.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.ShowStartScreen(System.String)">
 <summary>
 Show Start screen.
 </summary>
 <param name="szText">Show text...</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.ShowStimScreen(System.Int32,System.Int32)">
 <summary>
 Show the experimental stimulation screen and highlight current stimulation interval.
 </summary>
 <param name="lIdx">Index of the highlighted interval. Use the response codes (see GetResponse) to select an interval or deselect all.</param>
 <param name="lTime">ShowStimScreen (0) will be executed after lTime. If you don't want to use this feature ommit lTime or set it to zero.</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.ShowNextScreen(System.String,System.Drawing.Color)">
 <summary>
 Show the experimental screen for the next stimulus.
 </summary>
 <param name="szFB">Text to be displayed on the screen, f.e. as a feedback.</param>
 <param name="lForeColor">The color of the text given in szFB, otherwise use SystemColors.ControlText.</param>
 <remarks>Calling ShowNextScreen, all interval will be deselected and the text szFB will be displayed.
 The GetResponse procedure will wait for the next button (if used in Settings).</remarks>
</member>
<member name="M:ExpSuite.frmExp.ShowHighlightedItem(System.Int32,System.Drawing.Color)">
 <summary>
 Highlight an interval on the experimental screen.
 </summary>
 <param name="lItem">Index of the interval to be highlighted. Maximum value is IFC-1</param>
 <param name="lForeColor">Color of the highlighted interval, otherwise use SystemColors.ControlText</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.ShowEndScreen">
 <summary>
 Show the end-of-experiment screen.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.AllowResizing(System.Boolean)">
 <summary>
 Enable/disable resizing and moving the experiment screen.
 </summary>
 <param name="blnEnable">TRUE: resizing/moving enabled</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.GetSize(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
 <summary>
 Get the size and position of the experimental screen.
 </summary>
 <param name="lLeft">Left position</param>
 <param name="lWidth">Width</param>
 <param name="lTop">Top position</param>
 <param name="lHeight">Height</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.SetSize(System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Set the size and position of the experimental screen.
 </summary>
 <param name="lLeft">Left position</param>
 <param name="lWidth">Width</param>
 <param name="lTop">Top position</param>
 <param name="lHeight">Height</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmExp.SetBreak(System.Boolean)">
 <summary>
 Set the experimental state to "break"
 </summary>
 <param name="blnBreak">TRUE: break active.</param>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.frmExp.FeedBackFontSize">
 <summary>
 Get/set the feedback font size.
 </summary>
 <value>Font size as integer.</value>
 <returns>Font size as integer.</returns>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.frmInputBox">
 <summary>
 FrameWork Module - Programmable Input Box Form
 </summary>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.frmInputBox.GetValue(System.Int32)">
 <summary>
 Get the value of an item.
 </summary>
 <param name="Index">Index of the item.</param>
 <value></value>
 <returns>Value of the item with index Index.</returns>
 <remarks>How to use frmInputBox: <example><code lang="VB">
  Dim inpX As New frmInputBox, szX As String, lX As Long

    inpX.Add "const 1", ifNumeric + ifMin, "123", "us", -10
    inpX.Add "const 2", ifString, "asdas", "text"
    inpX.Add "const 3", ifFileName, "C:/asdads", "*.wav"
    If Not inpX.ShowForm("Caption of the input box") Then Set inpX = Nothing: Exit Sub
    szX = ""
    For lX = 0 To inpX.GetCount - 1
      szX = szX + inpX.GetValue(lX) + vbCrLf
    Next
    MsgBox szX
   Set inpX = Nothing
</code> </example> </remarks>
</member>
<member name="M:ExpSuite.frmInputBox.GetCount">
 <summary>
 Get the count of items in the form.
 </summary>
 <returns>Count of items in the form. Zero if there are no valid items.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmInputBox.ShowForm(System.String)">
 <summary>
 Show the input box form.
 </summary>
 <param name="Caption">Caption of the form.</param>
 <returns>TRUE if the data are valid, FALSE if cancel or close was clicked. The data are not valid in the latter case.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmInputBox.CheckValue(System.String,System.String,ExpSuite.FWintern.VariableFlags,System.String,System.Double,System.Double)">
 <summary>
 Check a value against its restrictions.
 </summary>
 <param name="szX">Parameter_Description</param>
 <param name="szName">Parameter_Description</param>
 <param name="Flags">Parameter_Description</param>
 <param name="szUnit">Parameter_Description</param>
 <param name="dMin">Parameter_Description</param>
 <param name="dMax">Parameter_Description</param>
 <returns>Error message.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmInputBox.Add(System.String,ExpSuite.FWintern.VariableFlags,System.String,System.String,System.Double,System.Double)">
 <summary>
 Add an input item to the form
 <br>Add input items before showing the form via ShowForm.</br>
 </summary>
 <param name="Title">Title of the item.</param>
 <param name="Flags">Flags for the item, see VariableFlags for the possible values. ElectrodeR/L are not supported.</param>
 <param name="Defaul">Default value (String) showed at the begin in the input box.</param>
 <param name="Units">Units of the item, it will be shown at the right of the input box.</param>
 <param name="Min">Minimum value for numerical values.</param>
 <param name="Max">Maximum value for numerical values.</param>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.frmInputMultiline">
 <summary>
 FrameWork Module - Programmable Multiline Input Box Form.
 </summary>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.frmInputMultiline.Title">
 <summary>
 Set the title of the multiline text.
 </summary>
 <value></value>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.frmInputMultiline.SetLeft">
 <summary>
 Set the left position of the input form.
 </summary>
 <value></value>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.frmInputMultiline.SetTop">
 <summary>
 Set the top position of the input form.
 </summary>
 <value></value>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmInputMultiline.ShowForm(System.String)">
 <summary>
 Show the input box form.
 </summary>
 <param name="Caption">Caption of the form.</param>
 <returns>TRUE if the data are valid, FALSE if cancel or close was clicked. The data are not valid in the latter case.</returns>
 <remarks>Call ShowForm to show the form.</remarks>
</member>
<member name="T:ExpSuite.frmItemListPostfix">
 <summary>
 FrameWork Module. Implementation of the Postfix of Item Lists dialog.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.frmMain">
 <summary>
 FrameWork Module. Main Window.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmMain.ServeData(ExpSuite.FWintern.ServeDataEnum,System.Int32,System.Int32,System.String,System.Int32)">
 <summary>
 Selects sending mode, gets the data and calls a sendData function.
 </summary>
 <param name="szEvent">Used to select sending mode.</param>
 <param name="index">Row index</param>
 <param name="col">Column index</param>
 <param name="value">Value</param>
 <param name="cnum">Client Number</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmMain.SettingsPackage">
 <summary>
 Returns setting package for remote monitoring.
 </summary>
 <returns>Package as string.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmMain.SetResultList(System.String)">
 <summary>
 Set the Result List.
 </summary>
 <param name="szText">String with list items, separated by ;</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmMain.NextItem(System.Int32,System.Double)">
 <summary>
 NextItem: use Itemlist.NextItem instead.
 </summary>
 <param name="lNrInterl"></param>
 <param name="sProgress"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmMain.SetUIBusy">
 <summary>
 Set the user interface to state: busy
 </summary>
 <remarks>This function can be used to disable the user interface while processing for longer period.
 The most buttons but Cancel will be disabled, all menus too.
 The cursor changes to hour glass and item list is not available.</remarks>
</member>
<member name="M:ExpSuite.frmMain.SetUIReady">
 <summary>
 Set the user interface to state: ready
 </summary>
 <remarks>SetUIReady sets the main window interface to a valid state after SetUIBusy.
 The state of the buttons/menus depends on many parameters such as running experiment, connection to the output,
 opened settings window, etc...</remarks>
</member>
<member name="M:ExpSuite.frmMain.CutDirName(System.String,System.Int32,System.String,System.Boolean)">
 <summary>
 Cut a part of a directory to get a string not longer than lWidth including an appendix szAppendix.
 </summary>
 <param name="szDir">String containing directory.</param>
 <param name="lWidth">Width of the label.</param>
 <param name="szAppendix">Additional appendix of the string. Will be considered calculating the total witdh of the caption.</param>
 <param name="NoBackslash">Optional: If boolean is true, no backslash is appended to szDir.</param>
 <returns>Cut string</returns>
 <remarks>Parts of szDir between two "\" will be removed to match the width of lWidth+Width(szAppendix).
If szDir ends with a backslash, it will be removed
After cutting a backslash is appended to the end of the cutted string (if optional boolean NoBackslash is not true), then the szappendix is appended.
 Works for frmMain only.</remarks>
</member>
<member name="T:ExpSuite.frmMain.SetStatusCallback">
 <summary>
 Set the status line.
 </summary>
 <param name="szStatus">String with the text. This text will be added to the log list too.</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmMain.SetProgressbar(System.Double)">
 <summary>
 Set the progress bar to a value.
 </summary>
 <param name="sVal">Value of the progress bar in percent. Valid range: 0..100%</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmMain.GetProgressbar">
 <summary>
 Get the current progress bar value.
 </summary>
 <returns>Current value in range 0..100%</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmMain.SetOutputStatus(System.Int32,System.Int32)">
 <summary>
 Set the status of the output channels.
 </summary>
 <param name="lCh">Channel (0:left square, 1: right square)</param>
 <param name="lState">State (see the list with available states)</param>
 <remarks>This function can be used to indicate the status of two channels
 in the bottom line of the main window, right to the status text.
 Depending on the lState, the background color of the squares changes.
 Four states are available:
<li>0: the standard case, color: grey, standard </li>
<li>1: creating stimulation files, color: yellow </li>
<li>2: playing or stimulating now, color: red </li>
<li>3: intermadiate (e.g. break between stimuli), color: green </li> </remarks>
</member>
<member name="M:ExpSuite.frmMain.ClearParameters">
 <summary>
 Clear all settings.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmMain.CreateItemList(System.Int32)">
 <summary>
 Creates an item list.
 </summary>
 <param name="lFlags">Main Automatisations Flags (mafIgnoreOptionWarnings)</param>
 <returns>Error message or empty if no error ocured.</returns>
 <remarks>This public function can be used to create an item list without using the button or menu.</remarks>
</member>
<member name="M:ExpSuite.frmMain.CreateAllStimuli">
 <summary>
 Creates all stimuli.
 </summary>
 <returns>Error message or empty if no error ocured.</returns>
 <remarks>This public function can be used to create all stimuli without using the button or menu.</remarks>
</member>
<member name="M:ExpSuite.frmMain.StimulateAllItems">
 <summary>
 Stimulates all item(s).
 </summary>
 <returns>Error message or empty if no error ocured.</returns>
 <remarks>This public function can be used to stimulate all items without using the button or menu.</remarks>
</member>
<member name="M:ExpSuite.frmMain.StimulateSelected(System.Int32)">
 <summary>
 Stimulates the selcted item(s).
 </summary>
 <param name="lFlags">Main Automatisations Flags (not used yet)</param>
 <returns>Error message or empty if no error ocured.</returns>
 <remarks>This public function can be used to stimulate items without using the button or menu.</remarks>
</member>
<member name="M:ExpSuite.frmMain.StartExperiment(ExpSuite.FWintern.AutomatisationFlags)">
 <summary>
 Starts an experiment.
 </summary>
 <param name="lFlags"> Main Automatisations Flags (mafIgnoreOptionWarnings, mafIgnoreHUIWarnings)</param>
 <returns>Error message or empty if no error ocured.</returns>
 <remarks>This public function can be used to start an experiment without using the button or menu.</remarks>
</member>
<member name="M:ExpSuite.frmMain.GetFirstItemOfExp">
 <summary>
 Wrapper to get the first item of experiment range.
 </summary>
 <returns>First item of experiment range.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmMain.GetLastItemOfExp">
 <summary>
 Wrapper to get the last item of experiment range.
 </summary>
 <returns>Last item of experiment range.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmMain.SetOnBreakCallback(ExpSuite.FWintern.OnBreakDelegate)">
 <summary>
 Sets the callback on loading Settings in the dialog.
 </summary>
 <param name="lAddr">Address of the callback function.</param>
 <remarks>OnLoad callback will be executed on loading of the Settings dialog.<br>
 This gives a possibility to adapt the Settings dialog, before it have been shown.</br> </remarks>
</member>
<member name="T:ExpSuite.frmOptions">
 <summary>
 FrameWork Module. Implementation of the Options dialog.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.frmResult">
 <summary>
 FrameWork Module. Implementation of the Result form.
 </summary>
 <remarks>This form can be multiply created and used to show results in form of a grid or table.
 The functionality such as sorting, copy to clipboard, ploting and saving is provided.</remarks>
</member>
<member name="M:ExpSuite.frmResult.SortColumn(System.Int32,System.Boolean)">
 <summary>
 Sort results table by column index.
 </summary>
 <param name="SortCol">Numeric index of column to be sorted</param>
 <param name="bReverseOrder">Optional, boolen, sort in reverse order</param>
 <returns>Optional string if error appeared or if column contained non-numeric values (string) and is sorted by string order.</returns>
 <remarks>Return value can be ignored, or displayed in a message box.</remarks>
</member>
<member name="P:ExpSuite.frmResult.PostFix">
 <summary>
 Set the postfix of the result file.
 </summary>
 <value></value>
 <returns>Postfix</returns>
 <remarks>Clicking on "Save As..." use can save the content of the result list to a CSV file.
 Postfix defines the postfix of this file, it will be saved in format: name_postfix.rsl.csv
 User is allowed to change the postfix in a window.</remarks>
</member>
<member name="M:ExpSuite.frmResult.SetOptimalColWidth">
 <summary>
 Set optimal column width for DataGridView cells.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.frmSettings">
 <summary>
 FrameWork Module. Implementation of the Settings dialog.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmSettings.MsgBoxOnTop(System.String,Microsoft.VisualBasic.MsgBoxStyle,System.String)">
 <summary>
 Show a message box on the top of all windows.
 </summary>
 <param name="szPrompt">Prompt</param>
 <param name="lButtons">Buttons options</param>
 <param name="szTitle">Title</param>
 <returns>Button clicked</returns>
 <remarks>MsgBoxOnTop is equivalent to MsgBox with the difference, that it will show the message box on the top of all windows.
 See the description of MsgBox for details on parameters.</remarks>
</member>
<member name="M:ExpSuite.frmSettings.SetOnOutputDeviceChangeCallback(ExpSuite.FWintern.OnOutputDeviceChangeDelegate)">
 <summary>
 Sets the callback on change of the output device.
 </summary>
 <param name="lAddr">Address of the callback function</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmSettings.SetOnSetCallback(ExpSuite.FWintern.OnSetDelegate)">
 <summary>
 Sets the callback on Set of new Settings.
 </summary>
 <param name="lAddr">Address of the callback function.</param>
 <remarks>OnSet callback will be executed on:
 <li>Loading settings from file, just after OnExpTypeChanged</li>
 <li>click on OK in the Settings form</li>
 <li>clear Settings to default, just after OnExpTypeChanged</li></remarks>
</member>
<member name="M:ExpSuite.frmSettings.SetOnChangeCallback(ExpSuite.FWintern.OnChangeDelegate)">
 <summary>
 Sets the callback on change of Settings.
 </summary>
 <param name="lAddr"></param>
 <remarks>OnChange callback will be executed on change of a value in Settings dialog.
 A click on OK is not required to execute OnChange - e.g. a text box loses its focus and
 OnChange will be executed immediatly.

 The delegate is     OnChangeDelegate(ByVal ExpType As Integer)
 where ExpType is the current experiment type
 </remarks>
</member>
<member name="M:ExpSuite.frmSettings.SetOnLoadCallback(ExpSuite.FWintern.OnLoadDelegate)">
 <summary>
 Sets the callback on loading Settings in the dialog.
 </summary>
 <param name="lAddr">Address of the callback function.</param>
 <remarks>OnLoad callback will be executed on loading of the Settings dialog.
 This gives a possibility to adapt the Settings dialog, before it have been shown.</remarks>
</member>
<member name="M:ExpSuite.frmSettings.SetOnExpTypeCallback(ExpSuite.FWintern.OnExpTypeChangeDelegate)">
 <summary>
 Sets the callback on change of the experiment type in the Settings dialog.
 </summary>
 <param name="lAddr">Address of the callback function</param>
 <remarks>OnExpType callback will be executed on a change of experiment type. The delegate is OnExpTypeChangeDelegate(ByVal lOld As Integer, ByVal lNew As Integer) where:
 <li>lOld: old experiment type</li>
 <li>lNew: new experiment type</li>
<br>
 The experiment type changes on:
 <li>loading setting from file, old exp. type is set to -1 in this case</li>
 <li>changing the experiment type in the Settings dialog</li>
 <li>clearing the settings, old exp. type is set to -1 in this case</li> </br> </remarks>
</member>
<member name="M:ExpSuite.frmSettings.GetConstantValues(System.String[]@)">
 <summary>
 Copies the values of all Constants to an array.
 </summary>
 <param name="varArr"> Array to be resized and filled.</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmSettings.UpdateSignalTab(ExpSuite.Implant.EARTYPE)">
 <summary>
 Update the Signal tab with mfreqParX, X=[L, R] depending on lCh.
 </summary>
 <param name="lCh"></param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.frmSettings.UpdateVariables">
 <summary>
 Update Variables in the Settings dialog.
 </summary>
 <remarks>UpdateVariables can be used when the variables changes and need to be updated in the Settings dialog.
 UpdateVariables will be executed on the change of experiment type, right after the OnExpTypeChanged callback
 and UpdateConstant</remarks>
</member>
<member name="M:ExpSuite.frmSettings.UpdateConstants">
 <summary>
 Update Constants in the Settings dialog.
 </summary>
 <remarks>UpdateConstants can be used when the constants changes and need to be updated in the Settings dialog.
 UpdateConstant will be executed on the change of experiment type, right after the OnExpTypeChanged callback</remarks>
</member>
<member name="M:ExpSuite.frmSettings.GetTempViWoParameter(System.Int32)">
 <summary>
 Get value of a parameter.
 </summary>
 <param name="lIdx">Index to a preview parameter.</param>
 <returns>Value of this parameter.</returns>
 <remarks>lIdx is the index to a preview parameter. If a corresponding temporary parameter
 can be found, its value will be returned. Otherwise, the value of the preview parameter, which is
 the default value will be returned.</remarks>
</member>
<member name="M:ExpSuite.frmSettings.SetTempViWoParameter(System.Int32,System.String)">
 <summary>
 Set a temporary parameter value.
 </summary>
 <param name="lIdx">Index to a preview parameter</param>
 <param name="szVal">New value</param>
 <remarks>lIdx is the index to a preview parameter. If a corresponding temporary parameter exists,
 its value will be set to szVal and it will be marked as dirty.
 Otherwise, a new temporary parameter will be created based on the preview parameter. Its new
 value will be szVal, too. The parameter list in the window will be updated to show that a new
 parameter is available now.</remarks>
</member>
<member name="T:ExpSuite.frmSettingsTrackRange">
 <summary>
 FrameWork Module. Implementation of the dialog to set Tracker ranges.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.frmShowStimulus">
 <summary>
 FrameWork Module. Implementation of the Show Stimulus dialog.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.frmTurntable">
 <summary>
 FrameWork Module. Implementation of the Turntable dialog.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.FWintern">
 <summary>
 FrameWork - Declarations and general methods.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.FW_MAJOR">
 <summary>
 Major version number of framework.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.FW_MINOR">
 <summary>
 Minor version number of framework.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.FW_REVISION">
 <summary>
 Revision of framework.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.FW_BRANCH">
 <summary>
 Label of the framework branch. Put your own label here if your branch differs from the original release.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.STB_STATUS">
 <summary>
 Status bar fields.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.STB_LEFT">
 <summary>
 Status bar fields.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.STB_RIGHT">
 <summary>
 Status bar fields.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.STB_ELAPSEDTIME">
 <summary>
 Status bar fields
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.STB_REMAININGTIME">
 <summary>
 Status bar fields.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.STB_REALTIME">
 <summary>
 Status bar fields.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.TEXT_BREAKSECONDS">
 <summary>
 Text in the experimental screen showing seconds until a break.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.TEXT_BREAKMINUTE">
 <summary>
 Text in the experimental screen showing one minute until a break.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.TEXT_BREAKMINUTES">
 <summary>
 Text in the experimental screen showing minutes until a break.
 </summary>
 <remarks></remarks>
 <seealso cref="F:ExpSuite.INISettings.gvarExp"/>
</member>
<member name="F:ExpSuite.FWintern.gbDarkMode">
 <summary>
 Define if dark mode (for example for EEG) will be used. Will cause a black screen in experiment window.
 </summary>
 <remarks>true = dark mode on; default: false</remarks>
</member>
<member name="T:ExpSuite.FWintern.AudioSynth">
 <summary>
 Structure for the synthesizer (Settings/Audio).
 </summary>
 <remarks>This structure describes all parameters of a synthesizer unit, which can be set
 in Settings/Audio.
 There are 2 synthesizer units available via YAMI at the moment.
 The parameters are saved in gAudioSynth() with the number of synthesizer unit as index.
 Depending on the type of signal addition parameter Par1 may be used.
 The signal is band passed with between LowCut and HighCut frequencies.</remarks>
</member>
<member name="F:ExpSuite.FWintern.AudioSynth.Signal">
 <summary>
 Signal Type of signal to generate: <li>0: Not used</li><li>1: Pink noise</li><li>2: White noise</li><li>3: Cosine</li><li>4: Low pass filtered white noise, 4th order butterworth</li><li>5: Low pass filtered white noise, 16th order butterworth</li>
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.AudioSynth.HighCut">
 <summary>
 Upper cut off frequency [Hz]
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.AudioSynth.LowCut">
 <summary>
 LowCut Lower cut off frequency [Hz]
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.AudioSynth.Par1">
 <summary>
 Additional parameter depending on Signal. Frequency [Hz] for Signal = Cosine; Low cut off frequency [Hz] for Signal = LP white noise.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.AudioSynth.Vol">
 <summary>
 Volume in dB FS.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.FWintern.ExpVariable">
 <summary>
 Structure for an experimental Variable (Settings/Variable)
 </summary>
 <remarks>This structure describes all properties of a variable which can be found in Settings/Variables.
 The data are saved in gvarExp() with the variable index as index.
 gvarExp() must be resized to the proper length and set correctly in:
 <li>Events.OnLoad</li>
 <li>Callback on change or load of settings</li>
 <li>Callback on change of experiment type</li></remarks>
 <seealso cref="F:ExpSuite.INISettings.gvarExp"/>
</member>
<member name="F:ExpSuite.FWintern.ExpVariable.varValue">
 <summary>
 Array containing the values set in Settings/Variables.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.ExpVariable.szDescription">
 <summary>
 Description of the variable, more than one line allowed.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.ExpVariable.szName">
 <summary>
 Name of the variable. Use a short name.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.ExpVariable.szUnit">
 <summary>
 Unit of the variable. Leave blank if not used.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.ExpVariable.szDefault">
 <summary>
 Default values. Leave blank if not used. Separate by ; for more values.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.ExpVariable.Flags">
 <summary>
 Flags restricting the values, see VariableFlags for more details.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.ExpVariable.dMin">
 <summary>
 Minimum value, if the restriction vfMin was set.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.ExpVariable.dMax">
 <summary>
 Maximum value, if the restriction vfMax was set.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.FWintern.ExpConstant">
 <summary>
 Structure for an experimental Constant (Settings/Constants)
 </summary>
 <remarks>This structure describes all properties of a constant which can be found in Settings/Constants.
 The data are saved in gconstExp() with the constant index as index.
 gconstExp() must be resized to the proper length and set correctly in:
 <li>Events.OnLoad</li>
 <li>Callback on change or load of settings</li>
 <li>Callback on change of experiment type</li></remarks>
</member>
<member name="F:ExpSuite.FWintern.ExpConstant.varValue">
 <summary>
 The values set in Settings/Constants.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.ExpConstant.varDefault">
 <summary>
 Default value.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.ExpConstant.szDescription">
 <summary>
 Description of the constant, appears in a tooltip of the constant.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.ExpConstant.szName">
 <summary>
 Name of the constant. Use a short name.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.ExpConstant.szUnit">
 <summary>
 Unit of the constant. Leave blank if not used.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.ExpConstant.Flags">
 <summary>
 Flags restricting the values, see VariableFlags for more details.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.ExpConstant.dMin">
 <summary>
 Minimum value, if the restriction vfMin was set.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.ExpConstant.dMax">
 <summary>
 Maximum value, if the restriction vfMax was set.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.FWintern.VariableFlags">
 <summary>
 Flags to restrict the content of Constants or Variables.
 </summary>
 <remarks>Select the type of content (string, numeric, directory of file name) and then use a proper
 restriction. The Variables can be linked to each other, which means, that number of values in one variable
 must match the number of values in another one. E.g. link Amplitude and Electrode, if for every electrode another amplitude must exist.</remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfString">
 <summary>
 Constant/Variable is a string. See String flags for further restrictions.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfNumeric">
 <summary>
 Constant/Variable is numeric. See Numeric flags for further restrictions.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfDirectory">
 <summary>
 Constant/Variable is a directory.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfFileName">
 <summary>
 Constant/Variable is a file name. See Filename flags for further restrictions. Use the Unit parameter to set the file name mask (e.g. *.txt)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfElectrodeL">
 <summary>
 Constant/Variable is a left electrode from Settings/Signal. On default, the AMP is checked to be between THR and MCL.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfElectrodeR">
 <summary>
 Constant/Variable is a right electrode from Settings/Signal. See Electrode flags for further restrictions.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfFlagTypeMask">
 <summary>
 Mask of the flag type. Use "MyFlags AND vfFlagTypeMask" to retrieve the type of the flag.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfInteger">
 <summary>
 Restrict to integer.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfNonZero">
 <summary><c>Numeric Flags: </c>
 Must not be zero.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfMinTimeDelay">
 <summary><c>Numeric Flags: </c>
 Must be positive integer.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfMin">
 <summary><c>Numeric/Electrode Flags: </c>
 Sets a restriction to a minimum value. Use the Min parameter to set the range.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfMax">
 <summary><c>Numeric/Electrode Flags: </c>
 Sets a restriction to a maximum value. Use the Max parameter to set the range.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfOffsetDependent">
 <summary><c>Numeric Flags: </c>
 The value is dependent on the Offset parameter in Settings/Procedure.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfVectorized">
 <summary><c>Electrode Flags: </c>
 Content can be a vector of electrodes, separated by blank or semicolon (not both!).
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfNoTHRCheck">
 <summary><c>Electrode Flags: </c>
 Do not check the AMP field to be higher then the THR field (from Settings/Signal)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfNoMCLCheck">
 <summary><c>Electrode Flags: </c>
 Do not check the AMP field to be higher then the MCL field (from Settings/Signal)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfNonEmpty">
 <summary><c>String Flags: </c>
 Content must not be empty.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfEnumeration">
 <summary><c>String Flags: </c>
 Content must be chosen one from a list given in Unit string. Use the Unit parameter to set the list of atoms selected by ;
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfCaseSensitive">
 <summary><c>String Flags: </c>
 Content is case sensitive.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfUpperCase">
 <summary><c>String Flags: </c>
 Content will be converted to upper case.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfLowerCase">
 <summary><c>String Flags: </c>
 Content will be converted to lower case.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfAbsolute">
 <summary><c>File name Flags: </c>
 Absolute file name including path name.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfRelativeDataDir1">
 <summary><c>File name Flags: </c>
 File name, relative to the data directory #1 (index = 0)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfRelativeDataDir2">
 <summary><c>File name Flags: </c>
 File name, relative to the data directory #2 (index = 1)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfRelativeDataDir3">
 <summary><c>File name Flags: </c>
 File name, relative to the data directory #3 (index = 2)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfRelativeDataDir4">
 <summary><c>File name Flags: </c>
 File name, relative to the data directory #4 (index = 3)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfRelativeDataDir5">
 <summary><c>File name Flags: </c>
 File name, relative to the data directory #5 (index = 4)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfRelativeDataDir6">
 <summary><c>File name Flags: </c>
 File name, relative to the data directory #6 (index = 5)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfRelativeDataDir7">
 <summary><c>File name Flags: </c>
 File name, relative to the data directory #7 (index = 6)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfHidden">
 <summary><c>System Flags: </c>
 Constant will be hidden. Works for Constants only, use vfDisabled for Variables instead.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfDisabled">
 <summary><c>System Flags: </c>
 Constant/Variable will be disabled.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VariableFlags.vfLinked">
 <summary><c>Link Flags: </c>
 Use this flag to link variables to each other by multiplying this flag with the (index+1) of the linked variable. E.g. If the Amplitude is the third variable (gvarExp(2)) and you want to link Electrode to Amplitude, then the flag will be: vfLinked * 3. The link only to the first 15 variables is allowed.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gblnIsDotNETSetting">
 <summary>
 Do we need to convert the VB6-framework settings to the .NET-framework settings?
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.F4FL">
 <summary>
 Fitt4Fun instances .
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.F4FR">
 <summary>
 Fitt4Fun instances .
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gszSettingTitle">
 <summary>
 Title of Settings.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gszSettingFileName">
 <summary>
 File name of Settings.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gblnSettingsForm">
 <summary>
 Settings dialog visible/unvisible.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gblnSettingsChanged">
 <summary>
 Settings changed?
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gblnSettingsLoaded">
 <summary>
 Settings loaded?
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gblnSettingsLoaded1">
 <summary>
 Settings loaded?
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gblnSettingsLoaded2">
 <summary>
 Settings loaded?
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gblnOutputStable">
 <summary>
 Connected to output?
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gblnShowStimulus">
 <summary>
 Show Stimulus before stimulation activated?
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gblnCancel">
 <summary>
 Cancel an action?
 </summary>
 <remarks>Cancel is: click on Cancel button (main form), ESC in an experiment</remarks>
</member>
<member name="F:ExpSuite.FWintern.gblnExperiment">
 <summary>
 Experiment running?
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gszYamiVersion">
 <summary>
 YAMI Version (YAMI returns version when connecting)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.glPlayerSampleRate">
 <summary>
 Sampling Rate of YAMI (Settings/Audio)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gblnConnectLeft">
 <summary>
 Must be TRUE to continue connection. See Events.OnConnect.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gblnConnectRight">
 <summary>
 Must be TRUE to continue connection. See Events.OnConnect.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.ItemList">
 <summary>
 Item List (Instance of clsItemList)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.DataDirectory">
 <summary>
 Data Directory (Instance of clsDataDirectory)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.AppResourcesDirectory">
 <summary>
 Data Directory (Instance of clsDataDirectory)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.FwGlobalDir">
 <summary>
 Global FrameWork Directory (for shared files, e.g. wave, RIB2,...)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gblnMIDIIgnore">
 <summary>
 Ignore MIDI Messages.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.glOutputPlay">
 <summary>
 Bit Array where the corresponding channel is set to true when a play command is sent to pd.
 When the channel finished playing pd will send a command that sets the channel bit to false again.
 Channels start counting with 0. (0, 1, 2, ...)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gszAPP_TITLE">
 <summary>
 Application title.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gszAPP_VERSION">
 <summary>
 Application version numer.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gszExpTypeNames">
 <summary>
 Array with names of experiment types.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.glExpMode">
 <summary>
 Mode of experiment for frmExp, contact Piotr...
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.glExpIFC">
 <summary>
 Number of intervals in a stimulus sequence
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.glExpAFC">
 <summary>
 Alternative Forced Choices, number of possible responses.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gszExpRequestText">
 <summary>
 Request text, appears in the experiment form.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gszExpResponseNames">
 <summary>
 Descriptions of response buttons, separated by ;
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.VocType">
 <summary>
 Vocoder Type
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.FWintern.gszItemListExtension">
 <summary>
 Item List Extension
 </summary>
 <remarks>Must be defined by application developer in Config.bat. A leading dot ('.') is removed.</remarks>
</member>
<member name="M:ExpSuite.FWintern.WaitHP(System.Int64@,System.Int32)">
 <summary>
 High Precision Counter support.
 </summary>
 <param name="curStart">Old value of HP counter, WaitHP updates curStart to the new.</param>
 <param name="lDelay">Optional delay in ms. If not given, WaitHP returns immediatly updating curStart only.</param>
 <returns>Boolean. Canceled or not.</returns>
 <remarks>WaitHP returns with the current value of the High Precision (HP) counter of Windows
 and/or waits a given delay lDelay. <br>
 Cancel button on the main window or HUI/Keyboard cancel the waiting.</br></remarks>
</member>
<member name="M:ExpSuite.FWintern.WaitSleepHP(System.Int64@,System.Int32)">
 <summary>
 High Precision Counter support with deactivation.
 </summary>
 <param name="curStart">ld value of HP counter, WaitHP updates curStart to the new.</param>
 <param name="lDelay">Optional delay in ms. If not given, WaitHP returns immediatly updating curStart only.</param>
 <returns>Boolean. Canceled or not.</returns>
 <remarks>WaitHP returns with the current value of the High Precision (HP) counter of Windows
 and/or waits a given delay lDelay. <br>
 Cancel button on the main window or HUI/Keyboard cancel the waiting.
 Additional, the thread will be deactivated while waiting.</br></remarks>
</member>
<member name="M:ExpSuite.FWintern.GetUboundConstants">
 <summary>
 Get the number of experimental constants.
 </summary>
 <returns>Number of experimental constants.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.FWintern.GetUboundVariables">
 <summary>
 Get the number of experimental variables.
 </summary>
 <returns>Number of experimental variables.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.FWintern.GetNextFileVersion(System.String@,System.String)">
 <summary>
 Get the next file version and number the file name.
 </summary>
 <param name="szFile">File name to search, will be updated to the next available version.</param>
 <param name="szExt">Extension of the file.</param>
 <remarks>GetNextFileVersion seeks for all files with the file name szFile and returns
 the file name labeled with next available version. <br>
 E.g. Given szName = "test" and szExt=".txt", if files "test.txt" and "test (2).txt" exist
 the new szName will be "test (2).txt".</br></remarks>
</member>
<member name="M:ExpSuite.FWintern.CheckVariable(System.String@,ExpSuite.FWintern.ExpVariable@,ExpSuite.clsFREQUENCY[],ExpSuite.clsFREQUENCY[])">
 <summary>
 Check a Variable against restrictions.
 </summary>
 <param name="szX">String with the context to be checked. Caution: if the Variable should be of numeric type, the variant data type will change to Double.</param>
 <param name="varExp">Variable with all restriction data.</param>
 <param name="freqParL"></param>
 <param name="freqParR"></param>
 <returns>String with error descriptions or empty if the content passed the check.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.FWintern.CheckConstant(System.String,ExpSuite.FWintern.ExpConstant,ExpSuite.clsFREQUENCY[],ExpSuite.clsFREQUENCY[])">
 <summary>
 Check a Constant against restrictions.
 </summary>
 <param name="szX">String with the context to be checked. Caution: if the Constant should be of numeric type, the variant data type will change to Double.</param>
 <param name="constExp">onstant with all restriction data.</param>
 <param name="freqParL"></param>
 <param name="freqParR"></param>
 <returns>String with error descriptions or empty if the content passed the check.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.FWintern.CheckValue(System.String@,System.String,ExpSuite.FWintern.VariableFlags,System.String,System.Double,System.Double,ExpSuite.clsFREQUENCY[],ExpSuite.clsFREQUENCY[])">
 <summary>
 Check a value against from Variables or Constants its restrictions. <br>
 Don't use CheckValue directly, use FWIntern.CheckVariable or FWIntern.CheckConstant instead.</br>
 </summary>
 <param name="szX"></param>
 <param name="szName"></param>
 <param name="Flags"></param>
 <param name="szUnit"></param>
 <param name="dMin"></param>
 <param name="dMax"></param>
 <param name="freqParL"></param>
 <param name="freqParR"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.FWintern.CheckElectrode(System.String,System.String,ExpSuite.FWintern.VariableFlags,System.Double,System.Double,ExpSuite.clsFREQUENCY[],ExpSuite.clsFREQUENCY[])">
 <summary>
 Check Electrode.
 </summary>
 <param name="varX">Value to check.</param>
 <param name="szName">Name of the Variable/Constant.</param>
 <param name="Flags">Flags of the Variable/Constant.</param>
 <param name="dMin">Lower limit</param>
 <param name="dMax">Upper limit.</param>
 <param name="freqParL"></param>
 <param name="freqParR"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.HUI">
 <summary>
 FrameWork - Internal use only.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.INIOptions">
 <summary>
 FrameWork - Handling of Options.
 </summary>
 <remarks>This module allows to use parameter files to read/write
 global parameters used in a project.
 Once defined all parameters, simple functions to
 read and write the complete parameter files are provided.


 <br>How to use:
  <li> complete all tasks marked as TODO in this module </li>
  <li> set all parameters to default values before reading the file
       (Form_Load is a good place to do that task) </li>
  <li> to read the parameter file call ReadFile "myparameterfile.ini" </li>
  <li> to write the parameter file call WriteFile "myparameterfile.ini" </li>
  <li> to search for a key call FindKey "myparameterfile.ini", "wantedkey" </li></br></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glCOMLeft">
 <summary>
 COM port for the left RIB (Options/RIB)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glCOMRight">
 <summary>
 COM port for the right RIB (Options/RIB)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszRIBServer">
 <summary>
 Filename of the RIB server application (Options/RIB)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gblnRIBSimulation">
 <summary>
 Simulate the RIB server? (Options/RIB)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gblnRIB2Simulation">
 <summary>
 Simulate the RIB2 device? (Options/RIB2)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszCurrentDir">
 <summary>
 Current active directory (not available in any form)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.grectMain">
 <summary>
 Position/size of the main window
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.grectSettings">
 <summary>
 Position/size of the Settings dialog.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.grectOptions">
 <summary>
 Position/size of the Options dialog.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.grectLevelDancer">
 <summary>
 Position/size of the Level Dancer dialog.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.grectFitt4Fun">
 <summary>
 Position/size of the Fitt4Fun dialog.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.grectResults">
 <summary>
 Position/size of the Results dialog.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glFlagBeepExp">
 <summary>
 Use Beeps in Experiment (Options/General)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gblnPlayWaveExp">
 <summary>
 Play wave file in break or when finishing experiment (Options/General)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gblnAutoBackupLogFile">
 <summary>
 Auto Backup Log File? (Options/General)
 </summary>
 <remarks>Automatically backup (save) log file when disconnecting</remarks>
</member>
<member name="F:ExpSuite.INIOptions.gblnAutoBackupLogFileSilent">
 <summary>
 Auto Backup Log File? (Options/General)
 </summary>
 <remarks>Automatically backup (save) log file when disconnecting, without a file dialogue</remarks>
</member>
<member name="F:ExpSuite.INIOptions.gblnAutoBackupItemList">
 <summary>
 Auto Backup Item List? (Options/General)
 </summary>
 <remarks>Automatically backup (save) item list in output folder</remarks>
</member>
<member name="F:ExpSuite.INIOptions.gblnUseFileNaming">
 <summary>
 Use File Naming rules? See: File naming system.sxw (Options/General)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glShowStimulusFlags">
 <summary>
 Stimulus Flags (Show Stimulus or Matlab/ShowStimulus.m)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszShowStimulusAxes">
 <summary>
 Axes Parameters (Show Stimulus or Matlab/ShowStimulus.m)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszShowStimulusParameter">
 <summary>
 Parameters (Show Stimulus or Matlab/ShowStimulus.m)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszItemListPostFix">
 <summary>
 User post fix of the item list (frmItemListPostFix, appears on Save Item List)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glFileNamingFlags">
 <summary>
 Flags of the post fix naming of the item list (frmItemListPostFix, appears on Save Item List)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glWarningSwitches">
 <summary>
 Warning Switches (Options/General)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gblnDisableSetOptimalColWidth">
 <summary>
 Disable automatic setting of column width
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gblnCheckForUpdates">
 <summary>
 Enable automatic check for updates when starting program
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gUpdateInterval">
 <summary>
 Interval to check for updates (days)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gLastUpdateCheck">
 <summary>
 Last check for updates
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszOptionsFile">
 <summary>
 Full path and file name of options file
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glPriority">
 <summary>
 Priority Index
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glLogMode">
 <summary>
 Mode of logging the experiment (Options/STIM)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gblnUseMATLAB">
 <summary>
 Use MATLAB?
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszMATLABServer">
 <summary>
 Path to MATLAB scripts
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszMATLABPath">
 <summary>
 Path to MATLAB scripts
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszRIBPath">
 <summary>
 Path to RIB files (Options/RIB)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszRIB2DeviceName">
 <summary>
 Device name for IO-card for RIB2 (Options/RIB2)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszRIB2Path">
 <summary>
 Path to RIB2 files (Options/RIB2)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszNICPath">
 <summary>
 Path to NIC files (Options/NIC)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gbShowDR">
 <summary>
 Show Dynamic Range in LevelDancer
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszLocalNetAddr">
 <summary>
 IP Address of the application from the point of view of YAMI (Options/Audio (Pd))
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glLocalNetPort">
 <summary>
 Port of the application from the point of view of YAMI (Options/Audio (Pd))
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszPlayerNetAddr">
 <summary>
 IP Address of YAMI (Options/Audio (Pd))
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glPlayerNetPort">
 <summary>
 Port of YAMI (Options/Audio (Pd))
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszPlayerFileName">
 <summary>
 File name of the YAMI application (Options/Audio (Pd))
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glPlayerFlags">
 <summary>
 Flags of YAMI (Options/Audio (Pd))
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glPlayerAudioDevice">
 <summary>
 Index of the audio device used by YAMI (Options/Audio (Pd))
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glPlayerADCAudioDevice">
 <summary>
 Index of the audio ADC (input) device used by YAMI (Options/Audio (Pd))
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glPlayerChannels">
 <summary>
 Number of channels used by YAMI (Options/Audio (Pd))
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glPlayerMIDIOutDevice">
 <summary>
 Index of MIDI Out Device used by YAMI (Options/Audio (Pd))
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glPlayerMIDIInDevice">
 <summary>
 Index of MIDI In Device used by YAMI (Options/Audio (Pd))
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glPlayerHPLeft">
 <summary>
 Headphones: Left channel (pd)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glPlayerHPRight">
 <summary>
 Headphones: Right channel (pd)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glDataChannel">
 <summary>
 Audio channel used for data transmission
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glTriggerChannel">
 <summary>
 Audio channel used for (onset) trigger playback
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszDACName">
 <summary>
 Audio DAC device name, alternative to index
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszADCName">
 <summary>
 Audio ADC device name, alternative to index
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gbAudioName">
 <summary>
 Use audio device NAMES, not audio device index
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glUnityLocalNetPort">
 <summary>
 Port of the application from the point of view of Unity (Options/Audio (Unity))
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszUnityNetAddr">
 <summary>
 IP Address of Unity (Options/Audio (Unity))
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glUnityNetPort">
 <summary>
 Port of Unity (Options/Audio (Unity))
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glCSVDelimiter">
 <summary>
 Delimiter between arguments in a CSV file (Options/CSV Export)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glCSVQuota">
 <summary>
 Quota for arguments containing delimiter in a CSV file (Options(CSV Export)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gblnIncludeHeadersInClipboard">
 <summary>
 Include Headers when copying cells from datagridview
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glTrackerMode">
 <summary>
 Tracker Mode:
  0 = deactivated
  1 = YAMI
  2 = ViWo (Unity)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glTrackerCOM">
 <summary>
 COM port for tracker (Options/Tracker). 0=deactivated
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glTrackerBaudrate">
 <summary>
 Tracker: Baudrate of the communication (Options/Tracker)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glTrackerSensorCount">
 <summary>
 Tracker: Number of sensors connected available (Options/Tracker)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gblnTrackerSimulation">
 <summary>
 Simulate tracker? (Options/Tracker)
 Available in YAMI tracker only.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glTrackerSettingsInterval">
 <summary>
 Tracker: Interval of data update in the Settings/Tracker form (Options/Tracker)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glTTMode">
 <summary>
 Turntable Mode. 0: no turntable; 1: Four Audio ANT turntable; 2: Outline ST2 turntable
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glTTLPT">
 <summary>
 LPT (Printer port) for Turntable (Options/Turntable). 0=deactivated
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gsngTTOffset">
 <summary>
 Offset of the turntable Outline ST2, this azimuth corresponds to real zero (Options/Turntable)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gsngTTResolution">
 <summary>
 Resolution of the Turntable (n.a. in a form, hardware depended)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gsngTT4AOffset">
 <summary>
 Offset of the turntable Four Audio ANT, this azimuth corresponds to real zero (can be redefined)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glTT4ABrakeTimer">
 <summary>
 Timer for turntable Four Audio ANT, xxx seconds after the last movement the brake is pulled. -1: disabled, 0: immediatly
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gblnAllowPreRotation">
 <summary>
 Allow pre-rotation for turntable Four Audio ANT, in order to send the rotation command to turntable already during previous item, since the command takes about 1 second before the turntable starts rotating
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.gszViWoAddress">
 <summary>
 IP Address (or name) of the computer running ViWo
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INIOptions.glViWoPort">
 <summary>
 Port of the service listening on the computer running ViWo
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.INIOptions.JoyPad">
 <summary>
 Class with information about a Joypad
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.INIOptions.ClearParameters">
 <summary>
 Clear option parameters and set to default values.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.INISettings">
 <summary>
 FrameWork - Handling of Settings.
 </summary>
 <remarks>
 This module allows to use parameter files to read/write
 settings used in a project.
 Once defined all parameters, simple functions to
 read and write the complete parameter files are provided.

 <br>Author: Piotr Majdak</br>

 <br>How to use:
  <li> complete all tasks marked as TODO in this module </li>
  <li> set all parameters to default values before reading the file </li>
       (Form_Load is a good place to do that task)
  <li> to read the parameter file call ReadFile "myparameterfile.ini" </li>
  <li> to write the parameter file call WriteFile "myparameterfile.ini" </li>
  <li> to search for a key call FindKey "myparameterfile.ini", "wantedkey" </li></br></remarks>
</member>
<member name="F:ExpSuite.INISettings.gszSourceDir">
 <summary>
 Source Directory of fitting files (Settings/Fitting Left)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gszDestinationDir">
 <summary>
 Root Directory (Settings/General/Output directory)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gblnNewWorkDir">
 <summary>
 Create a new work directory? (Settings/General/Output directory)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gblnSilentMode">
 <summary>
 Silent Mode (=no logging to files or list, logging mode will be 0)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gszFittFileLeft">
 <summary>
 File name of the fitting file left (Settings/Fitting Left)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gszFittFileRight">
 <summary>
 File name of the fitting file right (Settings/Fitting Right)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glImpLeft">
 <summary>
 Left implant used (RIB2)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glImpRight">
 <summary>
 Right implant used (RIB2)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gblnDoNotConnectToDevice">
 <summary>
 Do not connect to device (no pd player for acoustical stimulation and no RIB/NIC server for electrical stimulation)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.grectExp">
 <summary>
 Position and size of the experimental form (Settings/Experiment Screen)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gblnDestinationDir">
 <summary>
 Use the windows temporary directory as the root directory? (Settings/General/Output directory)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gszDescription">
 <summary>
 Description of the experiment (Settings/Description)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gszExpID">
 <summary>
 The ID of the experiment (Settings/Description)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gszItemListTitle">
 <summary>
 The title (file name without path) of the item list linked to the settings (Main Window/General information)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gblnExpOnTop">
 <summary>
 Show the experiment form alwyas on the top? (Settings/Experiment Screen)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gblnOverrideExpMode">
 <summary>
 Override experiment mode with a different mode
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gOExpMode">
 <summary>
 Override experiment mode with mode...
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gStimOutput">
 <summary>
 How to present the stimuli? (Settings/General)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gAudioSynth">
 <summary>
 Synthesizer parameters (Settings/Audio)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glAudioDACAddStream">
 <summary>
 Connect a synthesizer to an output channel (Settings/Audio)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glBreakInterval">
 <summary>
 Break after a given interval (Settings/Procedure)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glBreakFlags">
 <summary>
 Flags to specify the break interval (Settings/Procedure)
 </summary>
 <remarks><list>
 <item>0: no break (minutes)</item>
 <item>1: break (minutes)</item>
 <item>2: no break (items)</item>
 <item>3: break (items)</item>
 <item>4: no break (precent)</item>
 <item>5: break (precent)</item>
 </list></remarks>
</member>
<member name="F:ExpSuite.INISettings.glExperimentStartItem">
 <summary>
 Start item of the experiment
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glExperimentEndItem">
 <summary>
 End item of the experiment
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glElectrodeL">
 <summary>
 Selected electrode left (Settings/Signal/[Electrode | Acoust. Channel])
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glElectrodeR">
 <summary>
 Selected electrode right (Settings/Signal/[Electrode | Acoust. Channel])
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gfreqParL">
 <summary>
 Parameters of defined electrodes or acoust. channels (Setting/Signal)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gfreqParR">
 <summary>
 Parameters of defined electrodes or acoust. channels (Setting/Signal)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gvarExp">
 <summary>
 All experimental variables (Settings/Variables)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gconstExp">
 <summary>
 All experimental constants (Settings/Constants)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glInterStimBreak">
 <summary>
 Interstimulus break (Settings/Procedure)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glExpType">
 <summary>
 Selected experiment type (Settings/Procedure)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glExpHUIID">
 <summary>
 Selected Human Interface Device (Settings/Experiment Screen)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glExpFlags">
 <summary>
 Experiment Flags (Settings/Experiment Screen)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glOffsetL">
 <summary>
 Stimulus Offset Left (Settings/Procedure)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glOffsetR">
 <summary>
 Stimulus Offset Right (Settings/Procedure)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glRepetition">
 <summary>
 Repetitions of a block of items (Settings/Procedure)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glSamplingRate">
 <summary>
 Sampling rate of the audio device (Settings/Audio)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glResolution">
 <summary>
 Resolution (quantization) of the audio output signal (Settings/Audio)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gsFadeIn">
 <summary>
 Fade in every audio signal (Settings/Audio)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gsFadeOut">
 <summary>
 Fade out every audio signal (Settings/Audio)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gblnUseDataChannel">
 <summary>
 Use audio channel to transmit data
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gblnUseTriggerChannel">
 <summary>
 Use audio channel to transmit (onset) trigger signal
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glPreStimBreak">
 <summary>
 Prestimulus break (Settings/Procedure)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glPreStimVisu">
 <summary>
 Prestimulus Visual Offset (Settings/Procedure)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glPostStimVisu">
 <summary>
 Poststimulus Visual Offset (Settings/Procedure)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gblnTrackerUse">
 <summary>
 Use tracker? (Settings/Tracker)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.glTrackerRepRate">
 <summary>
 Repetition Rate of the tracker data (Settings/Tracker)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gsngTrackerPosScaling">
 <summary>
 Position Scaling (max. range) of the tracker data (Settings/Tracker)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gtsTrackerMin">
 <summary>
 Minimum ranges of a tracker sensor (Settings/Tracker/Click on a position/angle)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gtsTrackerMax">
 <summary>
 Maximum ranges of a tracker sensor (Settings/Tracker/Click on a position/angle)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gtsTrackerOffset">
 <summary>
 Offset of a tracker sensor (Settings/Tracker/Set Offset)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gtsTrackerValues">
 <summary>
 Default Values of a tracker sensor (Settings/Tracker/Set Values)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gblnTTUse">
 <summary>
 Use Turntable? (Settings/General/Turntable)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gsngViWoAvgHead">
 <summary>
 Averaging window for the data of the head sensor
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gsngViWoAvgPointer">
 <summary>
 Averaging window for the data of the pointer sensor
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.INISettings.gszViWoWorld">
 <summary>
 Name of the selected world.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.INISettings.ClearParameters">
 <summary>
 Clear settings parameters and set to default values.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.INISettings.SignalDefault(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
 <summary>
 Set the default values for new electrodes in Settings/Signal
 </summary>
 <param name="lCh">0 for the left electrodes, 1 for the right electrodes.</param>
 <param name="sAmp">Default value for the field "Amplitude"</param>
 <param name="sSPLOffset">Default value for the field "FS to SPL offset"</param>
 <param name="sCenterFreq">Default value for the field "Center freq."</param>
 <param name="sBandwidth">Default value for the field "Bandwidth"</param>
 <param name="sTHR">Default value for the field "THR"</param>
 <param name="sMCL">Default value for the field "MCL"</param>
 <param name="lPhDur">Default value for the field "Phase dur." in µs. This value will be showed in samples and as the true quantized value. This value must be different than zero to set the default values as valid.</param>
 <remarks>Separate default values can be set for the left and right electrodes.
 SignalDefault can be called any time, e.g. after the exp. type changed. Then, if the user
 click on "new electrode" the default values are applied.</remarks>
</member>
<member name="T:ExpSuite.MIDI">
 <summary>
 FrameWork - Handling of MIDI devices.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.MIDI.Out(System.Int32,System.Int32,System.Int32)">
 <summary>
 Send a command to MIDI Out.
 </summary>
 <param name="lCh">Channel number.</param>
 <param name="lCtrl">Controller number</param>
 <param name="lVal">Value</param>
 <remarks>FrameWork is connected to MIDI via YAMI, the devices are set in Options/Audio.
 Use MIDI.Out to send a message to your MIDI device. Any response of the device (via MIDI In)
 will be forwarded to Events.OnOutputResponse</remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorClient.ConnectTo(System.String,System.Windows.Forms.Form,System.Windows.Forms.ListBox,System.Windows.Forms.Label,System.Windows.Forms.ToolStripStatusLabel,System.Windows.Forms.ToolStripStatusLabel,System.Windows.Forms.ToolStripStatusLabel,System.Windows.Forms.ToolStripStatusLabel,System.Windows.Forms.DataGridView@,System.Windows.Forms.ToolStripMenuItem,System.Windows.Forms.ToolStripMenuItem,System.Windows.Forms.ToolStripMenuItem,System.Windows.Forms.Label)">
 <summary>
 Connects to a server application.
 </summary>
 <param name="szHost">Servername or IP-Address</param>
 <returns>True: Successfully connected <br> False: Connection failed.</br></returns>
 <remarks>ConnectTo tries to connect to a specified server application.</remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorClient.Disconnect">
 <summary>
 Disconnects from server application.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorClient.SettingsRequest">
 <summary>
 Sends a message to server to get settings.
 </summary>
 <returns>True: Settings loaded <br> False: No settings loaded on server application.</br></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorClient.UpdateSettings">
 <summary>
 Get settings update from remote server
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorClient.ItemListRequest">
 <summary>
 Sends a message to server to get itemlist.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorServer.Init(System.Windows.Forms.Form,System.Windows.Forms.ListBox,System.Windows.Forms.Label,System.Windows.Forms.ToolStripStatusLabel,System.Windows.Forms.ToolStripStatusLabel,System.Windows.Forms.ToolStripStatusLabel,System.Windows.Forms.ToolStripStatusLabel,System.Windows.Forms.DataGridView@,System.Windows.Forms.ToolStripMenuItem,System.Windows.Forms.ToolStripMenuItem,System.Windows.Forms.ToolStripMenuItem,System.Windows.Forms.Label)">
 <summary>
 Starts listening on port 10002.
 </summary>
 <remarks>Init binds a listener to local host IP-Address and port 10002 and starts listening.</remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorServer.Disconnect">
 <summary>
 Disconnects from all clients and closes listener socket.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorServerSend.ConnectToClient(System.String,System.Int32,System.Int32)">
 <summary>
 Connects to requesting client.
 </summary>
 <param name="szClient">Client IP-Address</param>
 <param name="port">Client port</param>
 <param name="clientNumber">Clientnumber for choosing right object in sender array.</param>
 <remarks>ConnectToClient creates a new sender socket, stores it in a sender array<br>and tries to connect to client.</br></remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorServerSend.SendData(ExpSuite.FWintern.ModeEnum,System.Int32,System.Int32,System.String)">
 <summary>
 Sends data to all connected clients.
 </summary>
 <param name="mode"></param>
 <param name="index"></param>
 <param name="col"></param>
 <param name="value"></param>
 <remarks>SendData changes buffersize, creates a bytearray and sends it to all clients. Before sending the bytearray<br>a start message and a response is nessecary, becaus of the asynchronous mode of the client.</br></remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorServerSend.SendDataSync(ExpSuite.FWintern.ModeEnum,System.Int32,System.Int32,System.String)">
 <summary>
 Sends data to all connected clients.
 </summary>
 <param name="mode"></param>
 <param name="index"></param>
 <param name="col"></param>
 <param name="value"></param>
 <remarks>SendData changes buffersize, creates a bytearray and sends it to all clients. Client has to be in synchronous mode.</remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorServerSend.SendDataSync(ExpSuite.FWintern.ModeEnum,System.Int32,System.Int32,System.Byte[])">
 <summary>
 Sends data to all connected clients.
 </summary>
 <param name="mode"></param>
 <param name="index"></param>
 <param name="col"></param>
 <param name="bvalue"></param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorServerSend.SendData(ExpSuite.FWintern.ModeEnum,System.Int32,System.Int32,System.String,System.Int32)">
 <summary>
 Sends data to one specified client.
 </summary>
 <param name="mode"></param>
 <param name="index"></param>
 <param name="col"></param>
 <param name="value"></param>
 <param name="cnum">Clientnumber</param>
 <remarks>SendData changes buffersize, creates a bytearray and sends it to one specified client. Before sending the bytearray<br>a start message and a response is nessecary, becaus of the asynchronous mode of the client.</br></remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorServerSend.SendDataSync(ExpSuite.FWintern.ModeEnum,System.Int32,System.Int32,System.String,System.Int32)">
 <summary>
 Sends data to one specified client.
 </summary>
 <param name="mode"></param>
 <param name="index"></param>
 <param name="col"></param>
 <param name="value"></param>
 <param name="cnum">Clientnumber</param>
 <remarks>SendData changes buffersize, creates a bytearray and sends it to one specified client. Client has to be in synchronous mode.</remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorServerSend.SendDataSync(ExpSuite.FWintern.ModeEnum,System.Int32,System.Int32,System.Byte[],System.Int32)">
 <summary>
 Sends data to one specified client.
 </summary>
 <param name="mode"></param>
 <param name="index"></param>
 <param name="col"></param>
 <param name="bvalue"></param>
 <param name="cnum">Clientnumber</param>
 <remarks>SendData changes buffersize, creates a bytearray and sends it to one specified client. Client has to be in synchronous mode.</remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorServerSend.Disconnect">
 <summary>
 Sends a message to all connected clients to disconnect.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorServerSend.Disconnect(System.Int32)">
 <summary>
 Closes a specified socket in sender array and deletes the object.
 </summary>
 <param name="cnum">Client number</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.RemoteMonitorServerSend.SetBufferSize">
 <summary>
 Synchronizes the buffersize with all clients.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.STIM">
 <summary>
 Stimulus creation, connection to MATLAB and logging of data.
 </summary>
 <remarks><h3>Important Properties of STIM</h3>


<li>GenerationMode*: 0: genElectricalRIB; 1: genAcoustical; 2: genElectricalNIC; 3: genElectricalRIB2</li>
<li>LoggingMode*: 0:  don '''t log to disk (not recommended); 15: log everything to disk</li>
<li>DestinationDir*: root directory for disk access, work dir will be created here</li>
<li>WorkDir: working directory, all files are created here</li>
<li>ID*: name of experiment, work directory will begin with ID</li>
<li>Description: description of experiment, may contain blanks and special characters. Description will be encoded (UUE) and logged</li>
<li>FirstName: first name of subject</li>
<li>LastName: last name of subject</li>
<li>Caption: caption of the STIM-list in the parent application</li>
<li>MATLABServer*: name of the MATLAB-Server. Leave empty for local server. A nonlocal server can'''t use graphical functions as plot and figure.</li>
<li>ShowStimulusFlags: Flags which are passed to ShowStimulus.</li>
<li>SourceDir*: Fitting files are copied from this directory</li>
<li>UseMatlab*: Set false if you don'''t want to connect to the Matlab server. All Matlab functionality will be disabled.</li>
<li>CreateWorkDir*: set false if you don'''t want to create a new work directory. Caution: a new log file with a time stamp will be created, but the stimlog.csv will be overwritten!</li>
<br>*: required before Init()</br>

<h3>Created directory structure</h3>

  <br>Root</br>
  <br>|</br>
  <br>- source directory [SourceDir]</br>
    <br>|</br>
    <br>- fitting files</br>
  <br>...</br>
  <br>- destination directory [DestinationDir]</br>
    <br>|</br>
    <br>- working directory [work] (ID_YYYYMMDD_HHmmss)</br>
  <br>|</br>
      <br>- current fitting file left [fittL] (.fitt)</br>
      <br>- current fitting file right [fittR] (.fitt)</br>
      <br>- generated stimulation files (stimXXXX.EXT)</br>
      <br>- generated parameter file (stimXXXX.csv)</br>
      <br>- generated logfile [logfile] (ID_YYYYMMDD_HHmmss.csv)</br>

<br>Auto naming of files:</br>
<li>YYYYMMDD: Year, month, day</li>
<li>HHmmss: hour, minute, second</li>
<li>XXXX: serial number, 4 digits</li>
<li>EXT: ".stim" in electricalRIB and ".wav" in acoustical mode</li></remarks>
</member>
<member name="T:ExpSuite.STIM.STIMULUSPARAMETER">
 <summary>
 Parameters of a stimulus.
 </summary>
 <remarks>Additional parameters available in MATLAB/stimPar. Some them are set on connect, the other may be changed on request.</remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.lElectrode">
 <summary>
 Electrode, index to a specific frequency channel in freqPar() beginning from 1. Corresponds to the chosen channel in Settings/Signal.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.freqPar">
 <summary>
 Array with parameters of electrodes/acoustical channels. Corresponds to all defined channel in Settings/Signal.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.lPulseNr">
 <summary>
 Pulse Number.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.lPulsePeriod">
 <summary>
 Pulse Period [samples]
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.lOffset">
 <summary>
 Temporal offset to shift a stimulus in time [samples]
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.sTimeBase">
 <summary>
 Time base [us] of all temporal parameter, reciprocal to lSamplingRate
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.lSamplingRate">
 <summary>
 Sampling rate of stimulus [Hz], reciprocal to sTimeBase
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.lResolution">
 <summary>
 Resolution (quantization) of audio stimuli [bit]
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.lLength">
 <summary>
 Stimulus length, not used yet in STIM.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.lChNr">
 <summary>
 Number of electrodes or frequency channels (array size of freqPar())
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.szFittFile">
 <summary>
 File name of current fitting file
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.szStimFile">
 <summary>
 File name of current stimulation file
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.iImpType">
 <summary>
 Electrical mode: type of implant (-1: none, 0: C40C, 1: C40P)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.szImpType">
 <summary>
 Electrical mode: description of implant
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.lFadeIn">
 <summary>
 Acoustical mode: Fade in [samples] of signal.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.lFadeOut">
 <summary>
 Acoustical mode: Fade out [samples] of signal.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.STIMULUSPARAMETER.Range0">
 <summary>
 Electrical mode: Fade in [samples] of signal.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.STIM.GENMODE">
 <summary>
 Mode of creating stimuli.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.GENMODE.genElectricalRIB">
 <summary>
 Electrical mode using RIB (MED-EL). In MATLAB genElectricalRIB = 0
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.GENMODE.genAcoustical">
 <summary>
 Acoustical mode with Pd. In MATLAB genAcoustical = 1
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.GENMODE.genElectricalNIC">
 <summary>
 Electrical mode using NIC (Cochlear).
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.GENMODE.genElectricalRIB2">
 <summary>
 Electrical mode using RIB2 (MED-EL).
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.GENMODE.genVocoder">
 <summary>
 Electrical mode using RIB2 (MED-EL). Presentation is via Pd (vocoder).
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.GENMODE.genAcousticalUnity">
 <summary>
 Acoustical mode with Unity.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.STIM.LOGMODE">
 <summary>
 Level of data logging.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.LOGMODE.logNoLogging">
 <summary>
 No logging at all.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.LOGMODE.logStimulusToFile">
 <summary>
 Log to the stimlog.csv on Init, NewStimulus, MatlabStimulus, Assemble and Matlab.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.LOGMODE.logStimulusToList">
 <summary>
 Log to the log list on Init, NewStimulus, MatlabStimulus and Assemble.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.LOGMODE.logLogToList">
 <summary>
 Log general information to the log list on Init, RegisterChannel and BackupLogFile.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.LOGMODE.logLogToFile">
 <summary>
 Log general information to the logfile (ID_DATE_TIME.csv) on Init and RegisterChannel
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.STIM.LOGMODE.logEverything">
 <summary>
 Summary of all logging modes.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.STIM.MatlabStimulus(System.String,ExpSuite.clsSTIMULUS[],System.Object[])">
 <summary>
 Create/Change stimulus using MATLAB functions.
 </summary>
 <param name="szFunc">Name of the MATLAB function you want to call (case sensitive!)</param>
 <param name="clsX"></param>
 <param name="varPar">Comma-delimited list of variant values with parameters of called MATLAB function. Numeric, string or empty data types will be accepted. Strings without valid MATLAB quoting ('...') will be quoted. Any value containing the data type 'Empty' will be converted to an empty vector ([]).</param>
 <returns>Zero-length if MATLAB function was executed without any errors. Contains the error message if any error occured.</returns>
 <remarks>On MatlabStimulus the function szFunc will be executed in MATLAB.
 <br>Passed parameters are: </br>
<li>stimVec: Stimulus vector. Empty vector on the first call after NewStimulus, result of previous calls. Appending of stimulus parts can achieved calling successively .MatlabStimulus.</li>
<li>stimPar: Stimulation parameters. Contains the structure STIMULUSPARAMETER, which is valid after .NewStimulus</li>
<li>all parameters in varPar()</li>
The MATLAB function must have the following header: [newstimVec, newstimPar] = szFunc(stimVec,stimPar,varPar...)</remarks>
</member>
<member name="M:ExpSuite.STIM.GetWavDuration(System.String,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
 <summary>
 Get the duration of a wav file, without MATLAB.
 </summary>
 <param name="FileName">Name of the wav file to analyze</param>
 <param name="samplerate">Samplerate of the wav file to analyze</param>
 <param name="bitspersample">Bits per sample of the wav file to analyze</param>
 <param name="channels">Channels of the wav file to analyze</param>
 <param name="Filesize">File size (bytes) of the wav file to analyze</param>
 <returns>Duration of wav file in ms (rounded).</returns>
 <remarks>MATLAB is not required.</remarks>
</member>
<member name="M:ExpSuite.STIM.MatlabStimulus(System.String,System.Object[])">
 <summary>
 Create/Change stimulus using MATLAB functions.
 </summary>
 <param name="szFunc">Name of the MATLAB function you want to call (case sensitive!)</param>
 <param name="varPar">Comma-delimited list of variant values with parameters of called MATLAB function. Numeric, string or empty data types will be accepted. Strings without valid MATLAB quoting ('...') will be quoted. Any value containing the data type 'Empty' will be converted to an empty vector ([]).</param>
 <returns>Zero-length if MATLAB function was executed without any errors. Contains the error message if any error occured.</returns>
 <remarks>On MatlabStimulus the function szFunc will be executed in MATLAB.
 <br>Passed parameters are: </br>
<li>stimVec: Stimulus vector. Empty vector on the first call after NewStimulus, result of previous calls. Appending of stimulus parts can achieved calling successively .MatlabStimulus.</li>
<li>stimPar: Stimulation parameters. Contains the structure STIMULUSPARAMETER, which is valid after .NewStimulus</li>
<li>all parameters in varPar()</li>
The MATLAB function must have the following header: [newstimVec, newstimPar] = szFunc(stimVec,stimPar,varPar...)</remarks>
</member>
<member name="M:ExpSuite.STIM.CheckStimulationFile(System.String@)">
 <summary>
 Check for stimulation file.
 </summary>
 <param name="szFile">File name of the stimulation file, without any path. Extension will be added if not found.</param>
 <returns>TRUE if the stimulation file can be found.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.STIM.Init(System.Int32,System.Int32)">
 <summary>
 Initialization of STIM.
 </summary>
 <param name="lSamplingRate">Sampling Rate of the audio signal.</param>
 <param name="lResolution">Resolution of the audio signal.</param>
 <returns>Zero-length if no error occured.</returns>
 <remarks><b>Init is called on connect from framework. Don't call it again.</b>
Activities:
<li>Create a MATLAB object</li>
<li>create the directory structure</li>
<li>logging of some parameters, depending on the LoggingMode property.</li>


Set before calling:
<li> SourceDir to the directory of fitting files</li>
<li>DestinationDir: to the directory where STIM will write</li>
<li>ID: to the ID of your experiment</li>
<li>GenerationMode: to the mode you want to create all stimuli</li>
<li>LoggingMode: to the level of logging (only logEverything support now)</li>
<li>Description: to the description of your experiment, this string will be logged</li>
<li>UseMatlab: If UseMATLAB property is TRUE, MATLAB object will be created.</li>
<li>CreateWorkDir: If TRUE, working directory will be creating according to the directory structure.</li>

Usage:
<li>Call it just once. If you want to call it repetitive you must execute Finish() inbetween, STIM will stuck otherwise.</li>
<li>Init allows two optional parameters: Sampling rate and Resolution. If given, stimPar is created in Matlab immediatly after the start of Matlab</li></remarks>
</member>
<member name="M:ExpSuite.STIM.ResetStimPar(System.Int32,System.Int32)">
 <summary>
 Reset stimPar (e.g. when loading a new mat file afterwards).
 </summary>
 <param name="lSamplingRate">Sampling Rate of the audio signal.</param>
 <param name="lResolution">Resolution of the audio signal.</param>
 <returns>Zero-length if no error occured.</returns>
</member>
<member name="M:ExpSuite.STIM.RegisterChannel(ExpSuite.STIM.STIMULUSPARAMETER@)">
 <summary>
 Registers a channel (left, right or multichannel).
 </summary>
 <param name="st">Stimulus parameters.</param>
 <returns>Empty for no errors, error string otherwise. Additional changes in st:
<li>.sTimeBase calculated using .lSamplingRate (only in acoustical mode)</li>
<li>.sTimeBase, .szFirstName, .szLastName read from the fitting file (only in electricalRIB mode)</li>
<li>.lSamplingRate calculated using .sTimeBase (only in electricalRIB mode)</li>
<li>.szImpType and .iImpType determined from fitting file (only in electricalRIB mode)</li>
 </returns>
 <remarks>
 Register a channel (=ear, side: left=0, right=1, multichannel. Not acoustical (frequency) channel!).
<br>Usage: </br>
<li>Call it after Init() for each channel you have.</li>
 <br><br><b>RegisterChannel is called by framework on connect. Don'''t call it again.</b></br></br>
 <br>st.lChNr must be valid on calling RegisterChannel:</br>
 <li>In acoustical mode, set st.lSamplingRate [Hz] and st.lResolution [bit]. Then, the .sTimeBase [us] will be calculated from .lSamplingRate.</li>
 <li>In electricalRIB mode, set .szFittFile to the name of a valid fitting file.  From this file some fields of st will be set (e.g. first and last name and time base).</li>
 <br>The field .lResolution will be ignored in this mode.</br>

<br>Set before calling RegisterChannel:</br>
<li>.lChNr to a valid audio channel.</li>
<li>.lSamplingRate (only in acoustical mode)</li>
<li>all items of freqPar()</li>
<li>.szFittFile to a valid fitting file (only in electricalRIB mode)</li>
<li>default values for electrode, pulsenr, pulseperiod, offset</li>

<br><br>Activities: </br></br>
<li>Logging</li>
<li>Determining the number of audio channels for auto naming mechanism</li>
<li>Copy fitting file to the working directory</li>
<li>Update of STIMULUSPARAMETER</li></remarks>
</member>
<member name="M:ExpSuite.STIM.AppendExtension(System.String)">
 <summary>
 Append correct extension to the stimulation file name.
 </summary>
 <param name="szFileName">Original File Name without extension.</param>
 <returns>File name with extension.</returns>
 <remarks>Appends the correct extension to the stimulation file name:
<li>.wav in acoustical mode</li>
<li>.stim in electrical RIB mode</li></remarks>
</member>
<member name="M:ExpSuite.STIM.NewStimulus(ExpSuite.STIM.STIMULUSPARAMETER@)">
 <summary>
 Start a new stimulus. The stimulus array/vector will be cleared.
 </summary>
 <param name="stNew">Use the variable set by RegisterChannel(). Clear .szStimFile to get an automatic generated file name in format stimXXXX_YY.ext (XXXX:stimulus index, YY:channel, ext: valid extension)</param>
 <returns>Zero-length string if no errors occured.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.STIM.NewDataStimulus(System.String,System.String,System.Int32,System.Int32)">
 <summary>
 Create a new data stimulus.
 </summary>
 <param name="szData">Data (string) that will be stored in file szFnData.<example>"File Azi90 Ele30"</example></param>
 <param name="szFnData">Data file name with absolute path, containing modulated data string.<example>"C:\Temp\File Azi90 Ele30.wav"</example></param>
 <param name="Nsamp">Optional: number of samples per symbol in modulation; default=128<example>128</example></param>
 <param name="QAMsize">Optional: alphabet size of QAM, must be an integer power of two; default=64<example>64</example></param>
 <returns>Empty string if no errors occured; otherwise: string containing error message.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.STIM.CloseStimulus">
 <summary>
 Close a stimulus.
 </summary>
 <returns>Zero-length string if no errors occured.</returns>
 <remarks>After creating stimulus with AssembleStimulus call this function before creating a new one.</remarks>
</member>
<member name="M:ExpSuite.STIM.ShowStimulus">
 <summary>
 Show the stimulation vector.
 </summary>
 <returns>Zero-length if no errors occured.</returns>
 <remarks>The vector stimVec will be plotted (acoustical) or shown (electrical).
 ShowStimulusFlags defines the options how the stimulus will be shown.</remarks>
</member>
<member name="M:ExpSuite.STIM.AssembleStimulus(System.Boolean)">
 <summary>
 Assemble a stimulation file.
 </summary>
 <param name="blnShow">Set to true if you want to show the stimulus before assembling. FRAMEWORK: This flag can be received from mblnShowStimulus</param>
 <returns>If no error occured the return value is "". In any error case the error message will be set to the return string.</returns>
 <remarks>In electrical RIB mode the MATLAB function assemble() is used.<br>
 In acoustical mode the MATLAB vector will be written as a WAV file.</br></remarks>
</member>
<member name="M:ExpSuite.STIM.BackupLogFile(System.String)">
 <summary>
 Backup log file.
 </summary>
 <param name="szFile">File name.</param>
 <returns>Error text if an error occures.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.STIM.Matlab(System.String)">
 <summary>
 Execute a MATLAB command.
 </summary>
 <param name="szCmd">Command sent to MATLAB.</param>
 <returns>Response string from MATLAB. Contains "" if no errors occured.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.STIM.MatlabGetRealMatrix2(System.String,System.Double[0:,0:]@)">
 <summary>
 Get real values from a 2D-Matrix from Matlab.
 </summary>
 <param name="szName">Matrix/Variable name.</param>
 <param name="dblReal">Array to which the matrix will be copied. The proper size must be set before calling MatlabGetRealMatrix2 (see MatlabGetMatrixSize)</param>
 <returns>Zero-length if no error ocured. Error message otherwise.</returns>
 <remarks>This function gets the 2D-matrix szName from Matlab, disgards the imaginery values and copies the real values to dblReal().</remarks>
</member>
<member name="M:ExpSuite.STIM.MatlabGetMatrixSize(System.String,System.Int32@,System.Int32@)">
 <summary>
 Get the size of a matrix.
 </summary>
 <param name="szName">Name of the Vector/Matrix or, general, Variable.</param>
 <param name="lRow">Number of Rows as result.</param>
 <param name="lCol">Number of Columns as result.</param>
 <returns>Error message or empty if no error ocured.</returns>
 <remarks>This function retrieves the size of a variable in Matlab.</remarks>
</member>
<member name="M:ExpSuite.STIM.Finish">
 <summary>
 Finish work with STIM.
 </summary>
 <returns>If no error occured the return value is "".</returns>
 <remarks>Using STIM after Finish() requires Init().<br>
<b>this function will be called on disconnect by Framework. Don't call it again!</b></br></remarks>
</member>
<member name="M:ExpSuite.STIM.Log(System.String,System.String[])">
 <summary>
 Log items to the log file.
 </summary>
 <param name="szY"></param>
 <param name="szItems">Each string will be quoted (if necessary) and written to the log file.</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.STIM.Log(System.String[])">
 <summary>
 Log items to the log file.
 </summary>
 <param name="szItems">Each string will be quoted (if necessary) and written to the log file.</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.STIM.BackupItemList(System.String)">
 <summary>
 Backup item list in work directory.
 </summary>
 <param name="szFile">Target file name (optional), default: work directory.</param>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.STIM.SourceDir">
 <summary>
 Source Directory of fitting files (Settings/Fitting Left)
 </summary>
 <value></value>
 <returns>Source Directory of fitting files (Settings/Fitting Left)</returns>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.STIM.DestinationDir">
 <summary>
 Root Directory (Settings/General/Output directory)
 </summary>
 <value></value>
 <returns>Root Directory (Settings/General/Output directory)</returns>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.STIM.WorkDir">
 <summary>
 Get the Work Directory.
 </summary>
 <value></value>
 <returns>Work Directory.</returns>
 <remarks>WorkDirectory is the active directory, where all files will be saved/read.
 In electrical mode, fitting files will be copied to this directory.<br>
 WorkDirectory is valid after Init(), or Connect in FrameWork.</br>
 <br>If the property CreateWorkDir is FALSE, WorkDir is the DestinationDir.</br>
 Otherwise, a new directory will be created in DestinationDir with the syntax:
<b>ID_YYYYMMDD_HHmmss</b>, where:
<li>ID: property ID</li>
<li>YYYYMMDD: Year , Month, Day</li>
<li>HHmmss: hour, minute, second</li></remarks>
</member>
<member name="P:ExpSuite.STIM.GenerationMode">
 <summary>
 Get the mode of generation of stimuli.
 </summary>
 <value></value>
 <returns>Generation mode, <see cref="T:ExpSuite.STIM.GENMODE"/>.</returns>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.STIM.ID">
 <summary>
 Get the experiment ID.
 </summary>
 <value></value>
 <returns>Experiment ID (Settings/Description)</returns>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.STIM.MATLABServer">
 <summary>
 Set the computer name providing the Matlab object.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.STIM.MATLABPath">
 <summary>
 Set the path to the MATLAB scripts.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.STIM.UseMatlab">
 <summary>
 Use Matlab on Init() (FrameWork: on connect)?
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.STIM.CreateWorkDir">
 <summary>
 Create Work directory on Init() (FrameWork: on connect)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.OSC">
 <summary>
 FrameWork - Open Sound Control (OSC) support
 </summary>
 <remarks>OSC module provides an access to the OSC protocol (written by Matt Wright)

 <br>Author: Piotr Majdak piotr@majdak.com</br></remarks>
</member>
<member name="M:ExpSuite.OSC.ParseBuffer(System.Byte[],System.String@,System.Object[]@)">
 <summary>
 Parse the OSC buffer and retrieve response consisting of COMMAND and ARGUMENTS.
 </summary>
 <param name="bytData">Buffer</param>
 <param name="szCmd">Command</param>
 <param name="varArgs">Array with parameters</param>
 <returns>Error message, empty if no error ocured.</returns>
 <remarks><c>Format: </c>COMMAND \0 ,tags \0 arg1 arg2 arg3 ...
 <br>Tags:</br>
  <li>i: integer, will be a Long</li>
  <li>f: float, will be a single</li>
  <li>s: string</li>
<br></br>
 <example>
 Example for 3 integers: COMMAND \0 ,iii \0 I1 I2 I3
 </example>
 <example>
 Example for 2 integers and string: COMMAND \0 ,iis I1 I2 STRING</example>
 <br>All \0 are 32 filled up to a word (4 bytes)</br></remarks>
</member>
<member name="M:ExpSuite.OSC.SeparateCommand(System.String@,System.String@)">
 <summary>
 Separate a command string in a OSC message to root and the rest.
 </summary>
 <param name="szCmd">Command. The root szRoot will be separated and the rest of the command will be returned in szCmd.</param>
 <param name="szRoot">Root of command szCmd.</param>
 <remarks><example>Example:
  <br>szCmd="ROOT/CMD1/CMD2"</br>
  <br>SeparateCommand(szCmd,szRoot)</br>
  <br>szCmd="CMD1/CMD2"</br>
  <br>szRoot="ROOT"</br>
  <br>SeparateCommand(szCmd,szRoot)</br>
  <br>szCmd="CMD2"</br>
  <br>szRoot="CMD1"</br>
  <br>SeparateCommand(szCmd,szRoot)</br>
  <br>szCmd="CMD1"</br>
  <br>szRoot=""</br></example></remarks>
</member>
<member name="T:ExpSuite.Output">
 <summary>
 FrameWork - Handling of output devices.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Output.Send(System.String,System.Object[])">
 <summary>
 Send an OSC command to YAMI.
 </summary>
 <param name="szAddr">OSC address in format "/root/tree1/obj2/method3"</param>
 <param name="varArgs">Parameters in an array.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Output.LoadStimulationFile(System.String,System.String,System.Int32,System.Int32)">
 <summary>
 Load Stimulation Files to YAMI or RIBs
 </summary>
 <param name="szLeft">File name of the left stimulus. The File name can contain an absolute path beginning with "\\" or a drive. The work directory will be used in other cases. If no extension is given, it will be appended depending on stimulation mode.</param>
 <param name="szRight">File name of an optional right stimulus. The File name can contain an absolute path beginning with "\\" or a drive. The work directory will be used in other cases. If no extension is given, it will be appended depending on stimulation mode.</param>
 <param name="lChLeft">Audio channel through which the stimulus szLeft will be played. If ommited or set to zero, the left channel for headphones presentation (Options/Audio) will be used.</param>
 <param name="lChRight">Audio channel through which the stimulus szRight will be played. If ommited or set to zero, the right channel for headphones presentation (Options/Audio) will be used.</param>
 <returns>Error message or empty if no error ocured.</returns>
 <remarks>Using lChLeft and/or lChRight the left/right stimulus will assigned to the given DAC channel.
 This assignment will be not removed, causing playing via multiple channels on repeated calls using different lChLeft or lChRight.
 To avoid this problem, reset existing assignments from all channels available using for example code like this:
<code lang="VB">
Dim lX as Long
For lX = 0 To glPlayerChannels - 1
  Output.Send "/DAC/SetStream/" + TStr(lX), "set", "silence"
Next
</code></remarks>
</member>
<member name="M:ExpSuite.Output.LoadDataStimulus(System.String)">
 <summary>
 Load Data Stimulation Files to YAMI
 </summary>
 <param name="szFnData">File name of the data stimulus. The File name can contain an absolute path beginning with "\\" or a drive. The work directory will be used in other cases. If no extension is given, it will be appended depending on stimulation mode.</param>
 <returns>Error message or empty if no error ocured.</returns>
</member>
<member name="M:ExpSuite.Output.LoadTriggerStimulus">
 <summary>
 Load Trigger Stimulation File to YAMI
 </summary>
 <returns>Error message or empty if no error ocured.</returns>
</member>
<member name="M:ExpSuite.Output.CreateTriggerSignal">
 <summary>
 Create Trigger Stimulation File
 </summary>
 <returns>Error message or empty if no error ocured.</returns>
</member>
<member name="M:ExpSuite.Output.PrepareStimulationFile(System.String@)">
 <summary>
 Prepare Stimulation Files for YAMI or RIBs.
 </summary>
 <param name="szFile">File Name.</param>
 <returns>New File Name.</returns>
 <remarks>Creates full file name including directory and checks for existency
 returns the new file name in szFile.</remarks>
</member>
<member name="M:ExpSuite.Output.StartStimulation">
 <summary>
 Start Stimulation.
 </summary>
 <returns>Error message or empty if no error ocured.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Output.Start(System.String)">
 <summary>
 Start stimulation with any command.
 </summary>
 <param name="szCmd">OSC Command to YAMI.</param>
 <returns>Nothing will be returned at the moment.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Output.GetStimulusDuration(System.String,System.Int32@)">
 <summary>
 Get Stimulus Duration in ms.
 </summary>
 <param name="szFile">File name.</param>
 <param name="lSR">Sampling rate.</param>
 <returns>Duration in ms. -1 if an error ocured.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Output.WaitForReady(System.Int32,System.Int32)">
 <summary>
 Wait until the output device gets ready.
 </summary>
 <param name="lTimeOut">Time Out in ms.</param>
 <param name="lSleepInt">If given, the application thread will be halted for the duration of lSleepInt (in ms) to save CPU load.</param>
 <returns>Empty if no error ocured</returns>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.Proc">
 <summary>
 FrameWork - General tools
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.TStr(System.Double)">
 <summary>
 Convert numeric data to String.
 </summary>
 <param name="X">Numeric value.</param>
 <returns>String.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.TStr(System.Int32)">
 <summary>
 Convert numeric data to String.
 </summary>
 <param name="X">Numeric value.</param>
 <returns>String.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.ClipCursorToWindow(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Clip the mouse cursor to an area in a window.
 </summary>
 <param name="hWnd">Handle of the window. Set hWnd to 0 to release the clipping area.</param>
 <param name="lLeft">Left corner [pixels]</param>
 <param name="lTop">Top corner [pixels]</param>
 <param name="lWidth">Width of the area.</param>
 <param name="lHeight">Height of the area.</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.Bytes2Float(System.Byte,System.Byte,System.Byte,System.Byte)">
 <summary>
 Convert 4 bytes to a 32-bit float number (Single)
 </summary>
 <param name="b0">Byte #0</param>
 <param name="b1">Byte #1</param>
 <param name="b2">Byte #2</param>
 <param name="b3">Byte #3</param>
 <returns>Float number. The Float number must have been saved in IEEE format.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.Bytes2Long(System.Byte,System.Byte,System.Byte,System.Byte)">
 <summary>
 Convert 4 Bytes to a 32-integer (Long)
 </summary>
 <param name="b0">Byte #0</param>
 <param name="b1">Byte #1</param>
 <param name="b2">Byte #2</param>
 <param name="b3">Byte #3</param>
 <returns>Long number.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.Long2Bytes(System.Int32,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
 <summary>
 Convert a 32-bit integer (Long) to 4 bytes.
 </summary>
 <param name="l0">Long number.</param>
 <param name="b0">Byte #0 as result.</param>
 <param name="b1">Byte #1 as result.</param>
 <param name="b2">Byte #2 as result.</param>
 <param name="b3">Byte #3 as result.</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.StartApplication(System.String)">
 <summary>
 Start Application by the file name
 </summary>
 <param name="szName">File Name of the Application.</param>
 <returns>???</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.CloseApplication(System.String)">
 <summary>
 Close application.
 </summary>
 <param name="sWindowName">Name of the Window without extension.</param>
 <returns>
 <li>-1: error ocured</li>
 <li>0: process not found</li>
 <li>1: window found and closed</li>
 <li>2: process has been killed</li>
 </returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.GetWindowsDir">
 <summary>
 Get Windows Directory.
 </summary>
 <returns>Path to the Windows Directory</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.GetSystemDir">
 <summary>
 Get the System Directory of Windows.
 </summary>
 <returns>Path to the System Directory of Windows.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.Log10(System.Double)">
 <summary>
 Calculate LOG based on 10
 </summary>
 <param name="sX">Number</param>
 <returns>Log10(sX)</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.Log2(System.Double)">
 <summary>
 Calculate LOG based on 2
 </summary>
 <param name="sX">Number</param>
 <returns>Log2(sX)</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.SngMod(System.Single,System.Single)">
 <summary>
 Calculate the remainder of division.
 </summary>
 <param name="sA">Number to divide.</param>
 <param name="sB">Divisor</param>
 <returns>Remainder</returns>
 <remarks>Obsolete function, use MOD instead</remarks>
</member>
<member name="M:ExpSuite.Proc.Deg2Rad(System.Double)">
 <summary>
 Convert from degrees to radians.
 </summary>
 <param name="sAngle">Angle in degress.</param>
 <returns>Angle in radians.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.Rad2Deg(System.Double)">
 <summary>
 Convert from radians to degrees.
 </summary>
 <param name="sAngle">Angle in radians.</param>
 <returns>Angle in degress.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.ArcSin(System.Double)">
 <summary>
 Calculate the acrsine of a value.
 </summary>
 <param name="sValue">Value</param>
 <returns>arcsine of value sValue</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.ArcCos(System.Double)">
 <summary>
 Calculate the acrcosine of a value
 </summary>
 <param name="sValue">Value</param>
 <returns>arccosine of value sValue</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.TextBoxState(System.Windows.Forms.TextBox,System.Boolean)">
 <summary>
 Disable/Enable a textbox control.
 </summary>
 <param name="txtControl">txtControl Name of the control</param>
 <param name="blnState">TRUE: Enabled <br>FALSE: Disabled.</br></param>
 <remarks>The Textbox control will be locked and disabled and the background color set to windows background.</remarks>
</member>
<member name="M:ExpSuite.Proc.SetStatus(System.Windows.Forms.ListBox,System.Windows.Forms.ToolStripStatusLabel,System.String)">
 <summary>
 Sets the status in listbox.
 </summary>
 <param name="lbxX"></param>
 <param name="tssl"></param>
 <param name="status"></param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.TimeStatus(System.Windows.Forms.Form,System.Windows.Forms.ToolStripStatusLabel,System.String)">
 <summary>
 Changes time in frmMain.
 </summary>
 <param name="form"></param>
 <param name="tssl"></param>
 <param name="status"></param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.ConnectionTimer(System.Windows.Forms.Form,System.Windows.Forms.Timer)">
 <summary>
 Resets connectionTimer
 </summary>
 <param name="form"></param>
 <param name="timer"></param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.NetworkStatus(System.Windows.Forms.Form,System.Windows.Forms.ToolStripStatusLabel,System.Int32)">
 <summary>
 Changes the network icon in frmMain.
 </summary>
 <param name="form"></param>
 <param name="tssl"></param>
 <param name="status">0: idle<br>1: transmit<br>2: offline</br></br></param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.SelectItem(System.Windows.Forms.DataGridView,System.Int32)">
 <summary>
 Selects Item in Itemlist.
 </summary>
 <param name="dgv"></param>
 <param name="index">Current item</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.SetSize(System.Windows.Forms.DataGridView)">
 <summary>
 Sets optimal column width.
 </summary>
 <param name="dgv"></param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.MnuRemoteMonitorEnabled(System.Windows.Forms.Form,System.Windows.Forms.ToolStripMenuItem,System.Boolean)">
 <summary>
 Enables Button
 </summary>
 <param name="form"></param>
 <param name="tsmi"></param>
 <param name="enable"></param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.MnuRemoteMonitorText(System.Windows.Forms.Form,System.Windows.Forms.ToolStripMenuItem,System.String)">
 <summary>
 Changes text of a ToolStripMenuItem
 </summary>
 <param name="form"></param>
 <param name="tsmi"></param>
 <param name="text"></param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.CopyDataGridView(System.Windows.Forms.DataGridView,System.Windows.Forms.DataGridView@,System.Int32,System.Int32,System.Int32)">
 <summary>
 Copy a datagrid to an other, including its content.
 </summary>
 <param name="dgvS"></param>
 <param name="dgvD"></param>
 <param name="lBeg"></param>
 <param name="lEnd"></param>
 <param name="lStart"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.CopyArray(System.String[])">
 <summary>
 Copy Array.
 </summary>
 <param name="szSrc">Source array.</param>
 <returns>Target array.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.CopyArray(System.Double[])">
 <summary>
 Copy Array.
 </summary>
 <param name="szSrc">Source array.</param>
 <returns>Target array.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.GetUbound(System.String[])">
 <summary>
 Get the unbound of an array.
 </summary>
 <param name="lArray">Array</param>
 <returns>Number of elements in the array, -1 if empty</returns>
 <remarks>Difference to Ubound() of VB: Works for empty arrays, resulting in -1.</remarks>
</member>
<member name="M:ExpSuite.Proc.GetUbound(System.Int32[])">
 <summary>
 Get the unbound of an array.
 </summary>
 <param name="lArray">Array</param>
 <returns>Number of elements in the array, -1 if empty</returns>
 <remarks>Difference to Ubound() of VB: Works for empty arrays, resulting in -1.</remarks>
</member>
<member name="M:ExpSuite.Proc.GetUbound(System.Double[])">
 <summary>
 Get the unbound of an array.
 </summary>
 <param name="lArray">Array</param>
 <returns>Number of elements in the array, -1 if empty</returns>
 <remarks>Difference to Ubound() of VB: Works for empty arrays, resulting in -1.</remarks>
</member>
<member name="M:ExpSuite.Proc.GetUbound(ExpSuite.clsFREQUENCY[])">
 <summary>
 Get the unbound of an array.
 </summary>
 <param name="lArray">Array</param>
 <returns>Number of elements in the array, -1 if empty</returns>
 <remarks>Difference to Ubound() of VB: Works for empty arrays, resulting in -1.</remarks>
</member>
<member name="M:ExpSuite.Proc.ChangeDir(System.String)">
 <summary>
 Change directory.
 </summary>
 <param name="szDir">Path name</param>
 <returns> <li>FALSE: Directory changed</li> <li>TRUE: Couldn't change, as error ocured.</li></returns>
 <remarks>Difference to ChDir: Drive will be changed if it's a local drive</remarks>
</member>
<member name="M:ExpSuite.Proc.GetCommandLine(System.Int32)">
 <summary>
 Get the command line parameters.
 </summary>
 <param name="MaxArgs">Maximum number of arguments. If not given, the number will be 11.</param>
 <returns>Array containing parsed parameters. Array is empty if no parameter could be found in the command line.</returns>
 <remarks>Parameters can be separated by blank or tab, if a parameter is quoted it may contain blanks or tabs. Parameters must not contain quotas.</remarks>
</member>
<member name="M:ExpSuite.Proc.Mean(System.Double[])">
 <summary>
 Calculate the arithmetic average (mean) value.
 </summary>
 <param name="sData">Array with data.</param>
 <returns>Mean (=arithmetic average) value of sData()</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.Median(System.Int32[])">
 <summary>
 Returns median value of an array.
 </summary>
 <param name="lData">Data array (input).</param>
 <returns>Median value.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.Median(System.Double[])">
 <summary>
 Returns median value of an array.
 </summary>
 <param name="sData">Data array (input).</param>
 <returns>Median value.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.Std(System.Double[],System.Double)">
 <summary>
 Calculate the standard deviation of a series.
 </summary>
 <param name="sData">Array with data.</param>
 <param name="sMean">Mean value of the series, must be calculated before.</param>
 <returns>Standard deviation of the series sData()</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Proc.RMSError(System.Double[],System.Double[])">
 <summary>
 Calculate the root mean square error between two series.
 </summary>
 <param name="sResponse">Series 1</param>
 <param name="sTarget">Series 2</param>
 <returns>RMS error</returns>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.Tracker">
 <summary>
 FrameWork - Tracker support.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.Tracker.glTrackerTriggerResponse">
 <summary>
 Experimental response from (Oculus) Tracker.
 </summary>
 <remarks><li>-1: no response</li>
 <li>other values: see key handling from ExpSuite</li></remarks>
</member>
<member name="T:ExpSuite.Tracker.TrackerSensor">
 <summary>
 Tracker Sensor data.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.Tracker.TrackerSensor.sngX">
 <summary>
 X position in cm
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.Tracker.TrackerSensor.sngY">
 <summary>
 Y position in cm
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.Tracker.TrackerSensor.sngZ">
 <summary>
 Z position in cm
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.Tracker.TrackerSensor.sngA">
 <summary>
 Azimuth angle in degrees
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.Tracker.TrackerSensor.sngE">
 <summary>
 Elevation angle in degrees
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.Tracker.TrackerSensor.sngR">
 <summary>
 Roll in degrees
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.Tracker.TrackerSensor.sngQX">
 <summary>
 Component X of quaternion
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.Tracker.TrackerSensor.sngQY">
 <summary>
 Component Y of quaternion
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.Tracker.TrackerSensor.sngQZ">
 <summary>
 Component Z of quaternion
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.Tracker.TrackerSensor.sngQW">
 <summary>
 Component W of quaternion
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.Tracker.TrackerSensor.blnValid">
 <summary>
 TRUE if the values are valid
 </summary>
 <remarks></remarks>
</member>
<member name="F:ExpSuite.Tracker.TrackerSensor.lStatus">
 <summary>
 Status of the sensor (used dependent on the data)
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Tracker.SetCurrentValues(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
 <summary>
 Set current tracker values.
 </summary>
 <param name="lS">Sensor index.</param>
 <param name="sngX">X-value</param>
 <param name="sngY">Y-value</param>
 <param name="sngZ">Z-value</param>
 <param name="sngA">A-value</param>
 <param name="sngE">E-value</param>
 <param name="sngR">R-value</param>
 <returns>Error text if an error occures.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Tracker.SetOffset(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
 <summary>
 Set tracker offsets.
 </summary>
 <param name="lS">Sensor index.</param>
 <param name="sngX">X-value</param>
 <param name="sngY">Y-value</param>
 <param name="sngZ">Z-value</param>
 <param name="sngA">A-value</param>
 <param name="sngE">E-value</param>
 <param name="sngR">R-value</param>
 <returns>Error text if an error occures.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Tracker.GetCurrentValues(System.Int32,System.Int32,ExpSuite.Tracker.TrackerSensor@)">
 <summary>
 Get Current Values of a sensor from tracker.
 </summary>
 <param name="lTO">Time Out in ms. Special cases: <li>lTo = 0: send request only, don't wait</li><li>lTo = -1: don't send request, get received values requested ages before.</li></param>
 <param name="lS">Sensor index (0...first sensor)</param>
 <param name="tsResult">Current values from tracker.</param>
 <returns>Empty if no errors, error message otherwise.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Tracker.TrackMinMaxValues(System.Int32,ExpSuite.Tracker.TrackerSensor@,ExpSuite.Tracker.TrackerSensor@)">
 <summary>
 Track Min or/and Max values of a sensor.
 </summary>
 <param name="lS">Sensor index (0...first sensor)</param>
 <param name="tsMin">Minimum values for all dimensions. The .lStatus field must have a set bit for each tracker dimension (order from LSB to MSB.</param>
 <param name="tsMax">Maximum values for all dimensions.</param>
 <returns>Empty if no error, error message otherwise.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Tracker.DontTrackMinMaxValues(System.Int32)">
 <summary>
 Stops tracking the min/max values by tracker.
 </summary>
 <param name="lS">Sensor index (0...first sensor)</param>
 <returns>Empty string if no error ocured.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Tracker.CheckTrackedMinValue(System.Int32,System.Int32)">
 <summary>
 Check if a sensor exceeded the minimum limit.
 </summary>
 <param name="lS">Sensor index (0...first sensor)</param>
 <param name="lStatus"></param>
 <returns></returns>
 <remarks>lStatus is a mask to check the requested dimension. Set to 63 to check all dimensions</remarks>
</member>
<member name="M:ExpSuite.Tracker.CheckTrackedMaxValue(System.Int32,System.Int32)">
 <summary>
 
 </summary>
 <param name="lS">Sensor index (0...first sensor)</param>
 <param name="lStatus"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Tracker.CheckTrackedInRange(System.Int32,System.Int32)">
 <summary>
 Check if the sensor is within range now
 </summary>
 <param name="lS">Sensor index (0...first sensor)</param>
 <param name="lStatus"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ExpSuite.Turntable">
 <summary>
 FrameWork - Turntable support.
 </summary>
 <remarks></remarks>
 
</member>
<member name="M:ExpSuite.Turntable.PortOut(System.Int16,System.Int16)">
 <summary>
 Send a message to LTP port.
 </summary>
 <param name="Port">Port number.</param>
 <param name="Data">Message.</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Turntable.PortIn(System.Int16)">
 <summary>
 Get current LTP port status.
 </summary>
 <param name="Port">Port number.</param>
 <returns>Response of LTP Port.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Turntable.GetAngle(System.Boolean,System.String@,System.Int32)">
 <summary>
 Get current turntable position in degrees azimuth, including offsets if bActualAngle = False (default).
 </summary>
 <returns>Degrees azimuth</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.Turntable.MoveToAngle(System.Double@,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Move turntable to angle...
 </summary>
 <param name="sngAngle">Angle in degrees azimuth.</param>
 <param name="lDir">Optional: Direction (only for Four Audio Turntable).</param><example>-1: shortest way (default), 0: clockwise, 1: counterclockwise</example>
 <param name="bEnableBrakeTimer">Optional: Direction (only for Four Audio Turntable).</param><example>False: Do NOT enable timer for break function after movement (default), True: Do enable timer for break function after movement</example>
 <param name="bAllowFullRotations">Optional: Allow full rotations (+/- 360 degrees) (only for Four Audio Turntable).</param><example>False: rotations below +/-360° only (default), True: full rotations possible (+/-360°)</example>
 <param name="bDontWait">Optional: If set to true, turntable rotation is started but the code continues without waiting if target angle has been reached. Source code can proceed inbetween.</param>
 <param name="lDelay">Optional: If value is not zero wait lDelay ms before send the rotation command.</param>
 <returns>Error text if an error occures.</returns>
</member>
<member name="T:ExpSuite.ViWo">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.ViWo.ViWoParameter.Copy">
 <summary>
 Copy the content of a source parameter to destination
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.ViWo.SendAllParametersToMIDI">
 <summary>
 Send all real and preview parameters to MIDI.
 </summary>
 <returns>Nothing at the moment.</returns>
 <remarks>Send parameters if a world is loaded.
 If a real parameter exist, its value will be used. If preview parameter exists only, the default value
 will be sent.</remarks>
</member>
<member name="M:ExpSuite.ViWo.SendParameterToMIDI(ExpSuite.ViWo.ViWoParameter)">
 <summary>
 Send a parameter to MIDI
 </summary>
 <param name="viwoPar">ViWo parameter.</param>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.ViWo.ChangeParameterByMIDI(System.Int32,System.Int32)">
 <summary>
 Change a parameter by MIDI data.
 </summary>
 <param name="lCtrl">MIDI controller</param>
 <param name="lVal">MIDI value</param>
 <remarks>The old value of a parameter will be modified according to the assign MIDI controller.
 If the real parameter does not exist, it will be copied from the preview parameter.
 The new parameter will be sent to ViWo immediatly. If the settings form is open, the temporary parameters
 change only and the Settings form will be updated - so you can track the changes of a parameter in real time
 in ViWo and Settings.</remarks>
</member>
<member name="M:ExpSuite.ViWo.GetPreviewParameterIndex(System.String)">
 <summary>
 Get the index of a preview parameter given by name.
 </summary>
 <param name="szName">Name of the preview parameter.</param>
 <returns>Index of the preview parameter. -1 if the parameter could not be found</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.ViWo.GetParameterIndex(System.String)">
 <summary>
 Get the index of a parameter given by name.
 </summary>
 <param name="szName">Name of the parameter.</param>
 <returns>Index of the parameter. -1 if the parameter could not be found</returns>
 <remarks>GetParameterIndex searches for a parameter with the name szName. If there is no parameter
 with this name, the search will be continued in the preview parameters array. If a corresponding
 preview parameter can be found, it will be copied to the parameters array and its index will be returned.
 If there is no real parameter nor preview parameter with such a name, -1 will be returned</remarks>
</member>
<member name="M:ExpSuite.ViWo.GetPreviewParameterCommand(System.String)">
 <summary>
 Get the OSC command of a preview parameter given by its name.
 </summary>
 <param name="szName">Name of the preview parameter.</param>
 <returns>String with the OSC command of the preview parameter. Empty if the parameter could not be found.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.ViWo.GetParameterCommand(System.String)">
 <summary>
 Get the OSC command of a parameter given by its name.
 </summary>
 <param name="szName">Name of the parameter</param>
 <returns>String with the OSC command of the  parameter. Empty if the parameter could not be found.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.ViWo.ClearParameters">
 <summary>
 Clear all parameters.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.ViWo.GetParametersCount">
 <summary>
 Get the count of parameters.
 </summary>
 <returns>Count of parameters. 0 if no parameters available.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.ViWo.SendAllParameters">
 <summary>
 Send all parameters to ViWo.
 </summary>
 <returns>String containing error report of not supported parameters.</returns>
 <remarks>All (real!) parameters will be sent to ViWo. If a parameters is not supported by the loaded world
 (corresponding preview parameter can not be found) an error will be returned.<br>
 If no world has been loaded, this function terminates immediatly.</br></remarks>
</member>
<member name="M:ExpSuite.ViWo.SendParameter(ExpSuite.ViWo.ViWoParameter)">
 <summary>
 Send a parameter to ViWo
 </summary>
 <param name="viwoPar"></param>
 <remarks>The parameter viwoPar will be parsed, converted to ViWo's parameter range and send to ViWo
<li>int, float: the value will be converted to a number and sent</li>
<li>color: the colors parts R, G, and B will be converted from 0..255 to 0..1 range</li>
<li>position: the value must be a string in form "X Y Z". It will be splitted and 3 values will be sent</li>
<li>string: the value will be sent as is</li></remarks>
</member>
<member name="M:ExpSuite.ViWo.AddParameter(ExpSuite.ViWo.ViWoParameter)">
 <summary>
 Add a new parameter to the parameters array.
 </summary>
 <param name="viwoparNew">ViWo parameter</param>
 <remarks>Used on load or change of settings</remarks>
</member>
<member name="M:ExpSuite.ViWo.AddPreviewParameter(System.Object[])">
 <summary>
 Add a preview parameter to the preview parameters array.
 </summary>
 <param name="varArgs">Variant array containing: index (not used), OSC command, type, MIDI, Default, additional parameter 1 and 2, and the name</param>
 <returns>Nothing yet.</returns>
 <remarks>A new preview parameter will be added. This function is called by the callback from ViWo.
 Additioanally, the default value will be decoded to FW standards and saved in .Value.
 If a corresponding real parameter exists, its MIDI data will be updated to the new data of
 the preview parameter. This is necessary in case of existing settings and real
 parameters and changing MIDI controller.</remarks>
</member>
<member name="M:ExpSuite.ViWo.GetPreviewParametersCount">
 <summary>
 Get the count of preview parameters.
 </summary>
 <returns>Count of preview parameters. 0 if no parameters available</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.ViWo.LoadPreviewParameters(System.String,System.Windows.Forms.ProgressBar)">
 <summary>
 Initiate loading of preview parameters from ViWo.
 </summary>
 <param name="szWorld"></param>
 <param name="pbStatus"></param>
 <returns></returns>
 <remarks>The parameters will be added using AddPreviewParameter.</remarks>
</member>
<member name="M:ExpSuite.ViWo.WorldLoad(System.String,System.Windows.Forms.ProgressBar)">
 <summary>
 Load a world in ViWo.
 </summary>
 <param name="szWorld">Name of the world</param>
 <param name="pbStatus"></param>
 <returns>Error message or empty if no error ocured.</returns>
 <remarks>WorldLoad initiates loading of a world in ViWo and waits for a response from the world.
 If no response can be received within 30 seconds an error will be returned.</remarks>
</member>
<member name="M:ExpSuite.ViWo.WorldUnload">
 <summary>
 Unload a world in ViWo.
 </summary>
 <returns>Nothing yet.</returns>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.ViWo.Init">
 <summary>
 Init this module at the application's start.
 </summary>
 <remarks></remarks>
</member>
<member name="P:ExpSuite.ViWo.Connected">
 <summary>
 Returns true if Viwo connected.
 </summary>
 <returns>True if Viwo connected.</returns>
</member>
<member name="M:ExpSuite.ViWo.Connect(System.Windows.Forms.ProgressBar)">
 <summary>
 Establish a connection to ViWo.
 </summary>
 <param name="pbStatus"></param>
 <returns></returns>
 <remarks><b>Warning: </b>This is not the "Connect" as used by framework. This function establishes the connection
 to ViWo and is called at the begin of the application.</remarks>
</member>
<member name="M:ExpSuite.ViWo.Disconnect">
 <summary>
 Disconnect from ViWo.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ExpSuite.ViWo.Send(System.String,System.Object[])">
 <summary>
 Send an OSC command to ViWo.
 </summary>
 <param name="szAddr">OSC address in format "/root/tree1/obj2/method3"</param>
 <param name="varArgs">Parameters in an array.</param>
 <returns></returns>
 <remarks></remarks>
</member>
</members>
</doc>
